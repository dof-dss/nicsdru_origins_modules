<?php

/**
 * @file
 * Contains origins_toc.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\Messenger;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function origins_toc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_toc module.
    case 'help.page.origins_toc':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides Table of Contents display options') . '</p>';
      return $output;

    default:
  }
}

function origins_toc_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $node_type = $node->id();

  $form['toc_settings'] = [
    '#type' => 'details',
    '#title' => t('Table of contents'),
    '#group' => 'additional_settings',
  ];

  $form['toc_settings']['toc_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable table of contents option.'),
    '#default_value' => $node->getThirdPartySetting('origins_toc', 'toc_enable', NULL),
  ];

  $form['toc_settings']['toc_config'] = [
    '#type' => 'container',
    '#states' => [
      'invisible' => [
        ':input[name="toc_enable"]' => ['checked' => FALSE],
      ],
    ],
  ];

  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node_type);

  foreach ($fields as $field) {
    if ($field instanceof FieldConfig) {
      $field_options[$field->getName()] = $field->label();
    }
  }

  $form['toc_settings']['toc_config']['toc_source_field'] = [
    '#type' => 'select',
    '#options' => $field_options,
    '#description' => t('Select the field to build the table of contents for.'),
    '#default_value' => $node->getThirdPartySetting('toc_source_field', 'toc_enable', NULL),
  ];

  $form['#entity_builders'][] = 'origins_toc_form_node_type_form_builder';
}

/**
 * Entity builder for the origins_toc_form_node_type_form_alter().
 */
function origins_toc_form_node_type_form_builder($entity_type, $type, &$form, $form_state) {
  $type->setThirdPartySetting('origins_toc', 'toc_enable', $form_state->getValue('toc_enable'));
  $type->setThirdPartySetting('origins_toc', 'toc_source_field', $form_state->getValue('toc_source_field'));
}


function origins_toc_entity_presave(EntityInterface $entity) {
  if ($entity instanceof Drupal\node\Entity\NodeType) {
    $toc_enabled = $entity->getThirdPartySetting('origins_toc', 'toc_enable', FALSE);
    if ($toc_enabled) {
      // If 'toc enable' doesn't exist for this node, create it.
      $field = FieldConfig::loadByName('node', $entity->id(), 'field_toc_enable');
      if (!$field) {
        // Create the enabled field for this entity.
        $field_storage = FieldStorageConfig::loadByName('node', 'field_toc_enable');

        // If the field storage config doesn't exists, warn and abort.
        if (empty($field_storage)) {
          \Drupal::logger('origins_toc')->critical(t('Attempting to create ToC for @node_type failed. No field storage for field_toc_enable was found.', ['@node_type' => $entity->id()]));
          $messenger = \Drupal::messenger();
          $messenger->addWarning(t('Missing field storage for field_toc_enable. Table of content option will not be available for entity of type: @node_type.', ['@node_type' => $entity->id()]));
          return;
        }

        $field = FieldConfig::create([
          'field_storage' => $field_storage,
          'bundle' => $entity->id(),
          'label' => t('Display Table of Contents'),
        ]);
        $field->setTranslatable(FALSE);
        $field->save();
      }

      // Enable the fields in the form display.
      $form_display = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.' . $entity->id() . '.default');
      $form_display->setComponent('field_toc_enable', [
        'type' => 'boolean_checkbox',
        'label' => 'above',
        'settings' => ['link_to_entity' => 'false'],
      ])->save();

    }
    else {
      // Delete the 'toc enable' field from this entity if it exists.
      $field = FieldConfig::loadByName('node', $entity->id(), 'field_toc_enable');
      if ($field) {
        $field->delete();
      }
    }
  }
}
