<?php

/**
 * @file
 * Contains origins_toc.module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Entity\EntityInterface;
use Drupal\flag\Entity\Flag;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function origins_toc_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_toc module.
    case 'help.page.origins_toc':
      $output = '';
      $output .= '<h3>' . t("About") . '</h3>';
      $output .= '<p>' . t("Provides a list of links to headings within a field in a content type.") . '</p>';
      $output .= '<h4>' . t("Configuration") . '</h4>';
      $output .= '<p>' . t("To enable the Table of content for a node type:") . '</p>';
      $output .= '<ul><li>' . t("Edit the node type.") . '</li>';
      $output .= '<li>' . t("Click 'enable' from the 'Table of contents' section under advanced settings.") . '</li>';
      $output .= '<li>' . t("Enter a CSS selector for the location the ToC should appear on the page.") . '</li>';
      $output .= '<li>' . t("Select if the ToC should appear before or after the location element.") . '</li>';
      $output .= '<li>' . t("Enter a CSS selector for the element that the ToC should be generated for.") . '</li>';
      $output .= '<li>' . t("Select a source element to generate the table of contents for, typically an H2 or H3 element.") . '</li>';
      $output .= '<li>' . t("You can exclude source elements with a certain class by adding the class name to the exclusions field.") . '</li>';
      $output .= '<li>' . t("The Minimum length of content setting controls when the ToC will be displayed depending on the screen length of the source content.") . '</li>';
      $output .= '<li>' . t("The 'Enable Debug' option will display useful ToC debug information in the browser console. This option should be disabled on production sites.") . '</li></ul>';
      $output .= '<p>' . t("When a content type has the Table of contents enabled, on the content edit screen the author will
      have the option of disabling the ToC display from the Flags section of the form.") . '</p>';

      return $output;

    default:
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_toc_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();
  $node_type = NodeType::load($node->id());

  $form['toc'] = [
    '#type' => 'details',
    '#title' => t('Table of contents'),
    '#group' => 'additional_settings',
  ];

  $form['toc']['toc_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable table of contents.'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_enable', NULL),
  ];

  $form['toc']['toc_config'] = [
    '#type' => 'container',
    '#states' => [
      'invisible' => [
        ':input[name="toc_enable"]' => ['checked' => FALSE],
      ],
    ],
  ];

  $form['toc']['toc_config']['toc_title'] = [
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('Displayed before the table of contents or blank for no title.'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_title', 'Table of contents'),
  ];

  $form['toc']['toc_config']['toc_location'] = [
    '#type' => 'textfield',
    '#title' => t('Location'),
    '#description' => t('CSS selector of the element where the ToC should be inserted.'),
    '#size' => 30,
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_location', NULL),
    '#placeholder' => '#location',
    '#states' => [
      'required' => [
        ':input[name="toc_enable"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['toc']['toc_config']['toc_insert'] = [
    '#type' => 'select',
    '#title' => t('Insert'),
    '#options' => [
      'after' => 'After',
      'before' => 'Before',
    ],
    '#description' => t('Insert the ToC before or after the location element..'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_insert', NULL),
  ];

  $form['toc']['toc_config']['toc_source_container'] = [
    '#type' => 'textfield',
    '#title' => t('Source container'),
    '#description' => t('CSS selector of the containing element to generate links for.'),
    '#size' => 30,
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_source_container', NULL),
    '#placeholder' => '#content-container',
    '#states' => [
      'required' => [
        ':input[name="toc_enable"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['toc']['toc_config']['toc_element'] = [
    '#type' => 'select',
    '#title' => t('Source element'),
    '#options' => [
      'h2' => 'H2 - Heading 2',
      'h3' => 'H3 - Heading 3',
      'h4' => 'H4 - Heading 4',
    ],
    '#description' => t('HTML element to generate the table of contents against.'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_element', NULL),
  ];

  $form['toc']['toc_config']['toc_exclusions'] = [
    '#type' => 'textfield',
    '#title' => t('Exclusions'),
    '#description' => t('Comma separated list of class names to exclude from the table of contents.'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_exclusions', NULL),
  ];

  $form['toc']['toc_config']['toc_screen_depth'] = [
    '#type' => 'select',
    '#title' => t('Minimum length of content before ToC display'),
    '#options' => [
      '1' => '1 screen',
      '2' => '2 screens',
      '3' => '3 screens',
      '4' => '4 screens',
      '5' => '5 screens',
      '6' => '6 screens',
      '7' => '7 screens',
      '8' => '8 screens',
      '9' => '9 screens',
      '10' => '10 screens',
      '11' => '11 screens ðŸ¤˜',
    ],
    '#description' => t('The length of content on the current users display before the ToC will be displayed.'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_screen_depth', 1),
  ];

  $form['toc']['toc_config']['toc_debug'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable debug'),
    '#description' => t('Display debugging information in the browser console window.'),
    '#default_value' => $node_type->getThirdPartySetting('origins_toc', 'toc_debug', 0),
  ];

  $form['#entity_builders'][] = 'origins_toc_form_node_type_form_builder';
}

/**
 * Entity builder for the origins_toc_form_node_type_form_alter().
 */
function origins_toc_form_node_type_form_builder($entity_type, $type, &$form, $form_state) {
  $type->setThirdPartySetting('origins_toc', 'toc_enable', $form_state->getValue('toc_enable'));
  $type->setThirdPartySetting('origins_toc', 'toc_title', $form_state->getValue('toc_title'));
  $type->setThirdPartySetting('origins_toc', 'toc_location', $form_state->getValue('toc_location'));
  $type->setThirdPartySetting('origins_toc', 'toc_insert', $form_state->getValue('toc_insert'));
  $type->setThirdPartySetting('origins_toc', 'toc_source_container', $form_state->getValue('toc_source_container'));
  $type->setThirdPartySetting('origins_toc', 'toc_element', $form_state->getValue('toc_element'));
  $type->setThirdPartySetting('origins_toc', 'toc_exclusions', $form_state->getValue('toc_exclusions'));
  $type->setThirdPartySetting('origins_toc', 'toc_screen_depth', $form_state->getValue('toc_screen_depth'));
  $type->setThirdPartySetting('origins_toc', 'toc_debug', $form_state->getValue('toc_debug'));
}

/**
 * Implements hook_entity_presave().
 */
function origins_toc_entity_presave(EntityInterface $entity) {
  if ($entity instanceof NodeType) {
    $toc_enabled = $entity->getThirdPartySetting('origins_toc', 'toc_enable', FALSE);

    $disable_toc_flag = Flag::load('disable_toc');

    // Warn if the require Flag is missing.
    if ($disable_toc_flag === NULL) {
      \Drupal::logger('origins_toc')->warning("The 'disable_toc' Flag was not found, the Table of Content settings will not be saved/updated.");
      return;
    }

    $flag_bundles = $disable_toc_flag->getBundles();

    if ($toc_enabled) {
      // Update 'disable_toc' flag, adding the current bundle to the Flaggable
      // types.
      if (!in_array($entity->id(), $flag_bundles)) {
        $flag_bundles[] = $entity->id();
        $disable_toc_flag->set('bundles', $flag_bundles);
        $disable_toc_flag->save();
      }
    }
    else {
      // Update 'disable_toc' flag, removing the current bundle from Flaggable
      // types.
      if (in_array($entity->id(), $flag_bundles)) {
        $flag_bundles = array_diff($flag_bundles, [$entity->id()]);
        $disable_toc_flag->set('bundles', $flag_bundles);
        $disable_toc_flag->save();
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function origins_toc_node_view(&$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\node\NodeInterface $entity */
  $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($entity->getType());
  $toc_settings = $node_type->getThirdPartySettings('origins_toc');

  if (!empty($toc_settings)) {
    // Check if ToC's have been disabled at the entity type.
    if (!$toc_settings['toc_enable']) {
      return $build;
    }

    $flag_service = Drupal::service('flag.count');
    $flags = $flag_service->getEntityFlagCounts($entity);

    // Check if the entity has the disable_toc flag set.
    if (array_key_exists('disable_toc', $flags) && $flags['disable_toc'] == 1) {
      return $build;
    }

    // Adding the toc library if the current entity type has toc enabled and the
    // current node does not have the disable_toc flag set.
    $build['#attached']['drupalSettings']['origins_toc']['settings'] = $toc_settings;
    $build['#attached']['library'][] = 'origins_toc/toc';
  }

  return $build;
}
