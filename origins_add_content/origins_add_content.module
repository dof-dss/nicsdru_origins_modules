<?php

/**
 * @file
 * Primary module hooks for Origins Add content module.
 */

use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function origins_add_content_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_common module.
    case 'help.page.origins_add_content':
      $output = '';
      $output .= '<h3>' . t("About") . '</h3>';
      $output .= '<p>' . t("Overrides the core node.add_page route to add links to non-node entities configured in this module's @settings_form_link.", [
        '@settings_form_link' => Link::createFromRoute('settings page', 'origins_add_content.settings')->toString()
        ]) . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function origins_add_content_theme() {
  return [
    'content_add_list' => [
      'variables' => ['content' => NULL],
    ],
  ];
}

/**
 * Prepares variables for list of available node and entity type templates.
 *
 * Default template: node-add-list.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - content: An array of content types.
 *
 * @see \Drupal\node\Controller\NodeController::addPage()
 */
function origins_add_content_preprocess_content_add_list(&$variables) {
  $variables['types'] = [];
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      if ($type instanceof NodeType) {
        $variables['types'][$type->id()] = [
          'type' => $type->id(),
          'add_link' => Link::fromTextAndUrl($type->label(), Url::fromRoute('node.add', ['node_type' => $type->id()], ['attributes' => ['class' => 'admin-item__link']]))->toString(),
          'description' => [
            '#markup' => $type->getDescription(),
          ],
        ];
      }
      elseif ($type instanceof ContentEntityType) {

        $entity_links = $type->get('links');

        if (array_key_exists('add-form', $entity_links)) {
          $variables['types'][$type->id()] = [
            'type' => $type->id(),
            'add_link' => Link::fromTextAndUrl($type->getLabel(), Url::fromUserInput($entity_links['add-form'], ['attributes' => ['class' => 'admin-item__link']])),
            'description' => [
              '#markup' => t('Add new @type content.', ['@type' => strtolower($type->getLabel())]),
            ],
          ];
        }
      }
    }
  }
  dump($variables);
}
