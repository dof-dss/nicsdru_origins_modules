<?php

/**
 * @file
 * Contains origins_common.module.
 */

include_once 'inc/layout_builder_search.inc';

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function origins_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_common module.
    case 'help.page.origins_common':
      $output = '';
      $output .= '<h3>' . t("About") . '</h3>';
      $output .= '<p>' . t("A common set of Drupal components.") . '</p>';
      $output .= '<h4>' . t("Layout Builder Search Indexing") . '</h4>';
      $output .= '<p>' . t("To enable Layout Builder search indexing:");
      $output .= '<ul><li>' . t("Ensure the Node Type has at least one Layout Builder enabled display.") . '</li>';
      $output .= '<li>' . t("Edit the Node Type and click 'Enable search indexing' under the 'Layout Builder search indexing' option") . '</li>';
      $output .= '<li>' . t("Choose the display mode that will be used to generate the search index content and save the form.") . '</li>';
      $output .= '<li>' . t("Within a Node edit form click 'Enable search indexing for this node' under the 'Layout Builder Search Indexing ' option.") . '</li>';
      $output .= '<li>' . t("Within a Node edit form click 'Enable search indexing for this node' under the 'Layout Builder Search Indexing ' option.") . '</li>';
      // Display Search API instructions.
      if (\Drupal::moduleHandler()->moduleExists('search_api')) {
        $output .= '<li>' . t('Under your <a href=":searchapi">Search API</a> server index, include the \'field_lb_search_content\' field for indexing.', [':searchapi' => Url::fromRoute('search_api.overview')->toString()]) . '</li>';
      }
      $output .= '</ul>';
      $output .= '<h4>' . t("Entity reference field HTML list display formatter") . '</h4>';
      $output .= '<p>' . t("Displays entity references as OL or UL HTML lists with the option of assigning a class to the list.");
      
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function origins_common_entity_presave(EntityInterface $entity) {

  // Process Layout Builder search options on node type edit form submit.
  if ($entity instanceof NodeType) {
    layout_builder_search_node_type_presave($entity);
  }

  // Process Layout Builder search on node edit form submit.
  if ($entity instanceof Node) {
    layout_builder_search_node_presave($entity);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  layout_builder_search_node_type_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_common_form_node_form_alter(&$form, $form_state, $form_id) {
  layout_builder_search_node_edit_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_common_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state) {
  // Hide alignment options that are displayed by default in
  // media_browser_responsive_images module as we don't need
  // that option in NICS sites.
  $form['attributes']['data-align']['#default_value'] = 'right';
  $form['attributes']['data-align']['#access'] = FALSE;
}
