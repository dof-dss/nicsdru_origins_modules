<?php

/**
 * @file
 * Contains origins_common.module.
 */

include_once 'inc/layout_builder.inc';

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\Node;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function origins_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_common module.
    case 'help.page.origins_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A common set of Drupal components') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function origins_common_entity_presave(EntityInterface $entity) {

  // Process Layout Builder search options on node type edit form submit.
  if ($entity instanceof NodeType) {
    layout_builder_search_node_type_presave($entity);
  }

  // Process Layout Builder search on layout save and node edit form submit.
  if ($entity instanceof ContentEntityInterface || $entity instanceof Node) {
    layout_builder_search_node_presave($entity);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $node_type = $node->id();
  $layout_builder_displays = entity_layout_builder_displays($node_type);

  if ($layout_builder_displays) {

    $form['lb_search_settings'] = [
      '#type' => 'details',
      '#title' => t('Layout Builder search indexing'),
      '#group' => 'additional_settings',
    ];

    $form['lb_search_settings']['lb_search_enable'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable search indexing'),
      '#default_value' => $node->getThirdPartySetting('origins_common', 'lb_search_enable', NULL),
    ];

    $form['lb_search_settings']['lb_search_options'] = [
      '#type' => 'container',
      '#states' => [
        'invisible' => [
          ':input[name="lb_search_enable"]' => ['checked' => FALSE],
        ],
      ],
    ];

    $form['lb_search_settings']['lb_search_options']['lb_search_index_display'] = [
      '#type' => 'select',
      '#title' => t('Select display mode'),
      '#description' => t('Layout Builder enabled display mode to render for search index.'),
      '#options' => $layout_builder_displays,
      '#default_value' => $node->getThirdPartySettings('origins_common', 'lb_search_index_display', NULL),

    ];

    $form['lb_search_settings']['lb_search_options']['lb_search_notes'] = [
      '#markup' => '<b>NOTE:</b> You will need to add the \'lb_search_content\' field to your Search API index fields.',
    ];

    $form['#entity_builders'][] = 'origins_common_form_node_type_form_builder';
  }
}

/**
 * Entity builder for the origins_common_form_node_type_form_alter().
 */
function origins_common_form_node_type_form_builder($entity_type, $type, &$form, $form_state) {
  $type->setThirdPartySetting('origins_common', 'lb_search_enable', $form_state->getValue('lb_search_enable'));
  $type->setThirdPartySetting('origins_common', 'lb_search_index_display', $form_state->getValue('lb_search_index_display'));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_common_form_node_form_alter(&$form, $form_state, $form_id) {
  $form['field_lb_search_content']['#disabled'] = TRUE;
  // Determine node type from node/add or node/edit forms.
  $node_type = \Drupal::routeMatch()->getParameter('node_type');
  if (!empty($node_type)) {
    $node_type = $node_type->id();
  }
  else {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_type = $node->getType();
  }

  // Get the search index content storage field.
  $entity_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($node_type);
  $settings = $entity_type->getThirdPartySettings('origins_common');

  // Ensure we have settings configured from the entity type form.
  $search_display_present = !empty($settings['lb_search_index_display']);

  if (!empty($form['field_lb_search_enable']) && !empty($form['field_lb_search_content']) && $search_display_present) {
    $form['layout_builder_search_indexing'] = [
      '#type' => 'details',
      '#title' => t('Layout builder search indexing'),
      '#group' => 'advanced',
      '#open' => FALSE,
    ];

    // Alter the field titles for displaying on the node edit form.
    $form['field_lb_search_enable']['widget']['value']['#title'] = t('Enable search indexing for this node.');
    $form['layout_builder_search_indexing'][] = $form['field_lb_search_enable'];
    unset($form['field_lb_search_enable']);

    $form['field_lb_search_content']['widget'][0]['value']['#title'] = t('Search index contents.');
    $form['layout_builder_search_indexing'][] = $form['field_lb_search_content'];
    unset($form['field_lb_search_content']);
  }
}
