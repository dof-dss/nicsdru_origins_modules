<?php

/**
 * @file
 * Contains origins_common.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Plugin\Context\EntityContext;
use Drupal\field\Entity\FieldConfig;
use Drupal\node\Entity\Node;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;

/**
 * Implements hook_help().
 */
function origins_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_common module.
    case 'help.page.origins_common':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A common set of Drupal components') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_presave().
 */
function origins_common_entity_presave(EntityInterface $entity) {
  // Ensure we're on the node edit page.
  if (!$entity instanceof ContentEntityInterface || !$entity instanceof Node) {
    return;
  }

  if ($entity->hasField('field_lb_enable_search_index')) {
    $enable_search = (bool) $entity->get('field_lb_enable_search_index')->getValue();

    if ($enable_search) {
      $entity_storage = \Drupal::entityTypeManager()->getStorage('node_type');
      $entity_type = $entity_storage->load($entity->getType());
      $settings = $entity_type->getThirdPartySettings('origins_common');

      $search_index_field = $settings['lb_search_index_field'] ?? NULL;
      $search_index_display = $settings['lb_search_index_display'] ?? NULL;

      if ($search_index_field && $search_index_display) {
        // Check the requested search index storage field exists.
        if ($entity->hasField($search_index_field)) {
          $view_builder =  \Drupal::entityTypeManager()->getViewBuilder('node');
          $build = $view_builder->view($entity, 'default');
          // Ideally we would use use a defined text format to filter the content.
          $content = strip_tags(\Drupal::service('renderer')->render($build));
          $entity->set($search_index_field, $content);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_node_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $node = $form_state->getFormObject()->getEntity();
  $node_type = $node->id();
  $layout_builder_displays = entity_layout_builder_displays($node_type);

  if ($layout_builder_displays) {
    $node_fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('node', $node_type);
    // Field types suitable for storage of content for search indexing.
    $search_field_types = ['string_long', 'text', 'text_with_summary'];
    $search_field_options = ['' => '- Please select -'];
    $search_field_enabled_exists = FALSE;

    foreach ($node_fields as $field) {
      if ($field instanceof FieldConfig) {
        if ($field->getType() == 'boolean' && $field->getName() == 'field_lb_enable_search_index') {
          $search_field_enabled_exists = TRUE;
          continue;
        }

        if (in_array($field->getType(), $search_field_types)) {
          $search_field_options[$field->getName()] = $field->label();
        }
      }
    }

    $form['lb_search_settings'] = [
      '#type' => 'details',
      '#title' => t('Layout Builder search indexing'),
      '#group' => 'additional_settings',
    ];

    if ($search_field_enabled_exists) {
      $form['lb_search_settings']['lb_search_index_field'] = [
        '#type' => 'select',
        '#title' => t('Search index field'),
        '#description' => 'Select the field to store rendered content of Layout builder page for 
        search indexing.
        <br><b>NOTE:</b> It is recommended that you use fields of type <i>plain, long</i>.
        <br><b>IMPORTANT:</b> This field should not be displayed to users of the site and should be included in your 
        search index configuration.',
        '#options' => $search_field_options,
        '#default_value' => $node->getThirdPartySetting('origins_common', 'lb_search_index_field', NULL),
      ];

      $form['lb_search_settings']['lb_search_index_display'] = [
        '#type' => 'select',
        '#title' => t('Select display mode'),
        '#description' => t('Layout Builder enabled display mode to render for search index.'),
        '#options' => $layout_builder_displays,
        '#default_value' => $node->getThirdPartySettings('origins_common', 'lb_search_index_display', NULL),
      ];

      $form['#entity_builders'][] = 'origins_common_form_node_type_form_builder';
    }
    else {
      $form['lb_search_settings']['lb_search_index_help'] = [
        '#type' => 'markup',
        '#markup' => 'Search indexing requires a field of type <i>boolean</i> with the machine name 
        <i>field_lb_enable_search_index.</i>',
      ];
    }
  }
}

/**
 * @param $node_type
 * @return array
 */
function entity_layout_builder_displays($node_type){
  $entity_displays = \Drupal::service('entity_display.repository');
  $entity_view_displays = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  $layout_builder_displays = [];
  $display_modes = $entity_displays->getViewModeOptionsByBundle('node', $node_type);

  foreach ($display_modes as $id => $mode) {
    $display_id = 'node.' . $node_type . '.' . $id;
    $display = $entity_view_displays->load($display_id);
    if ($display instanceof LayoutBuilderEntityViewDisplay) {
      $settings = $display->getThirdPartySettings('layout_builder');
      if (array_key_exists('enabled', $settings) && $settings['enabled'] == TRUE) {
        $layout_builder_displays[$display->getMode()] = $display->getMode();
      }
    }
  }
  return $layout_builder_displays;
}

/**
 * Entity builder for the origins_common_form_node_type_form_alter().
 */
function origins_common_form_node_type_form_builder($entity_type, $type, &$form, $form_state) {
  $type->setThirdPartySetting('origins_common', 'lb_search_index_field', $form_state->getValue('lb_search_index_field'));
  $type->setThirdPartySetting('origins_common', 'lb_search_index_display', $form_state->getValue('lb_search_index_display'));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_common_form_node_form_alter(&$form, $form_state, $form_id) {
  // Determine node type from node/add or node/edit forms.
  $node_type = \Drupal::routeMatch()->getParameter('node_type');
  if (!empty($node_type)) {
    $node_type = $node_type->id();
  }
  else {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_type = $node->getType();
  }

  // Get the search index content storage field.
  $entity_type = \Drupal::entityTypeManager()->getStorage('node_type')->load($node_type);
  $settings = $entity_type->getThirdPartySettings('origins_common');

  // Ensure we have settings configured from the entity type form.
  $search_field_present = !empty($settings['lb_search_index_field']);
  $search_display_present = !empty($settings['lb_search_index_display']);

  if ($search_field_present && $search_display_present) {
    $form['layout_builder_search_indexing'] = [
      '#type' => 'details',
      '#title' => t('Layout builder search indexing'),
      '#group' => 'advanced',
      '#open' => FALSE,
    ];

    $form['layout_builder_search_indexing'][] = $form['field_lb_enable_search_index'];
    unset($form['field_lb_enable_search_index']);
  }
}
