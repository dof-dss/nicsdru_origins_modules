<?php

/**
 * @file
 * Contains origins_common.module.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\facets\FacetInterface;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function origins_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_common module.
    case 'help.page.origins_common':
      $output = '';
      $output .= '<h3>' . t("About") . '</h3>';
      $output .= '<p>' . t("A common set of Drupal components.") . '</p>';
      $output .= '<h4>' . t("Entity reference field HTML list display formatter") . '</h4>';
      $output .= '<p>' . t("Displays entity references as OL or UL HTML lists with the option of assigning a class to the list.");

      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_revision_overview_form_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Add a submit handler to the revision overview form to set
  // the view mode to 'diff' for revisions comparisons.
  $form['#submit'][] = '_origins_common_revision_overview_form_submit';
}

/**
 * Submit handler for revision overview form.
 *
 * Modifies the redirect URL for the revision overview form set in its
 * submitForm() handler
 * (see modules/contrib/diff/src/Form/RevisionOverviewForm.php)
 * and adds an additional view_mode=diff query param.
 */
function _origins_common_revision_overview_form_submit(array &$form, FormStateInterface $form_state) {
  // Get info about the entity we are doing a revision comparison on.
  $build_info = $form_state->getBuildInfo();
  $entity = $build_info['args'][0];
  $entity_type = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  // Get available view modes.
  $view_modes = \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle($entity_type, $bundle);

  // If the diff view mode has been defined, add as a query param to the
  // redirect url for the revision comparison overview form.
  if (array_key_exists('diff', $view_modes)) {
    $redirect_url = $form_state->getRedirect()->setOption('query', [
      'view_mode' => 'diff',
    ]);
    $form_state->setRedirectUrl($redirect_url);
  }
}

/**
 * Implements hook_moderation_sidebar_alter().
 */
function origins_common_moderation_sidebar_alter(&$build, &$context) {
  if (!empty($build['actions']['secondary']['version_history'])) {
    $revisions_link = Link::createFromRoute(
      $build['actions']['secondary']['version_history']['#title']->__toString(),
      'entity.node.version_history',
      $build['actions']['secondary']['version_history']['#url']->getRouteParameters(),
      $build['actions']['secondary']['version_history']['#url']->getOptions()
    );

    // Replace the URL of revisions link with the updated Link Url object.
    if (!empty($build['actions']['secondary']['version_history']['#url'])) {
      $build['actions']['secondary']['version_history']['#url'] = $revisions_link->getUrl();
    }

    // Strip AJAX class to link direct to page.
    if (!empty($build['actions']['secondary']['version_history']['#attributes']['class'])) {
      $build['actions']['secondary']['version_history']['#attributes']['class'] = array_diff($build['actions']['secondary']['version_history']['#attributes']['class'], ['use-ajax']);
    }
  }

  if ($context instanceof Node && $context->getType() == 'webform') {
    // Fix obscure off-canvas JS bug by repointing the URL to the underlying
    // canonical test route name.
    if (!empty($build['actions']['secondary']['entity.node.webform.test_form'])) {
      $build['actions']['secondary']['entity.node.webform.test_form']['#url'] = Url::fromRoute(
        'entity.webform.test_form', ['webform' => $context->get('webform')->target_id]
      );
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function origins_common_preprocess_page(&$variables) {
  $theme = \Drupal::service('theme.manager')->getActiveTheme();

  // Adding the origins adminimal library for tweaks to the Adminimal theme if
  // the current page is using that theme.
  if ($theme->getName() === 'adminimal_theme') {
    $variables['#attached']['library'][] = 'origins_common/adminimal';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_block_admin_display_form_alter(&$form) {
  foreach ($form['blocks'] as $block_id => $block_info) {
    if (preg_match('/^#/', $block_id)) {
      // It's a render attribute so skip it.
      continue;
    }

    $type = $block_info['type']['#markup'] ?? '';

    if (preg_match('/facets/i', $type)) {
      /** @var \Drupal\block\BlockInterface $block */
      $block = Block::load($block_id);
      $settings = $block->get('settings');

      if (empty($settings)) {
        return;
      }

      $facet_id = str_replace('facet_block:', '', $settings['id']);
      /** @var \Drupal\facets\Entity\Facet $facet */
      $facet = \Drupal::entityTypeManager()->getStorage('facets_facet')->load($facet_id);

      if ($facet instanceof FacetInterface) {
        /** @var \Drupal\facets\Plugin\facets\facet_source\SearchApiDisplay $source */
        $source = $facet->getFacetSource();

        $view_title = $source->getViewsDisplay()->getTitle();
        // It's a facet block so we can adjust the title string.
        $existing_text = $form['blocks'][$block_id]['info']['#plain_text'];
        $form['blocks'][$block_id]['info']['#markup'] = "<em>(Facet view: ${view_title})</em> ${existing_text}";
        unset($form['blocks'][$block_id]['info']['#plain_text']);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_user_login_form_alter(&$form) {
  // Disable inline form errors on the login form (to rectify penetration test issues).
  $form['#disable_inline_form_errors'] = TRUE;
}

/**
 * Implements hook_preprocess_status_messages().
 */
function origins_common_preprocess_status_messages(&$variables) {
  // Add additional explanation to the oEmbed resource not found message.
  if (isset($variables['message_list']['error'])) {
    $error_messages = $variables['message_list']['error'];

    foreach ($error_messages as $index => $message) {
      if ($message == 'Could not retrieve the oEmbed resource.') {
        $message .= t("This may be due to media being inaccessible or set to private.");
        $variables['message_list']['error'][$index] = $message;
      }
    }
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function origins_common_editor_js_settings_alter(array &$settings) {
  // Remove the 'merge cells' option from the CKEditor 5 table options menu.
  foreach ($settings['editor']['formats'] as &$format) {
    if (isset($format['editorSettings']['config']['table'])) {
      foreach ($format['editorSettings']['config']['table']['contentToolbar'] as $idx => $option) {
        // Check for 'mergeTableCells' option.
        if ($option == 'mergeTableCells') {
          // Remove this option and re-index array.
          array_splice($format['editorSettings']['config']['table']['contentToolbar'], $idx, 1);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function origins_common_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add Claro fixes on entity queue page and also on all node edit forms.
  if (($form['#id'] == 'entity-subqueue-form') || (preg_match('/-edit-form$/', $form['#id']))) {
    $form['#attached']['library'][] = 'origins_common/origins_common_claro_fixes';
  }
}

/**
 * Implements hook_entity_presave().
 */
function origins_common_entity_presave(EntityInterface $entity) {
  if ($entity instanceof Node) {
    if ($entity->hasField('body')) {
      $body_field = $entity->get('body');
      $body_value = $body_field->getValue();
      $html_value = $body_value[0]['value'];
      if (preg_match('/\<thead\>/', $html_value)) {
        // Header row.
        $html_value = preg_replace("/\sscope=[\"']row[\"']/", "", $html_value);
        $html_value = preg_replace("/\<th\>/", "<th scope='col'>", $html_value);
      } elseif (preg_match('/\<th(.*)\>/', $html_value)) {
        // Header column.
        $html_value = preg_replace("/\sscope=[\"']col[\"']/", "", $html_value);
        $html_value = preg_replace("/<th[^>]+>/", "<th scope='row'>", $html_value);
        $html_value = preg_replace("/\<th\>/", "<th scope='row'>", $html_value);
        $body_value[0]['value'] = $html_value;
        $entity->set('body', $body_value);
      } else {
        // Remove all scope attributes.
        $html_value = preg_replace("/\sscope=[\"']row[\"']/", "", $html_value);
        $html_value = preg_replace("/\sscope=[\"']col[\"']/", "", $html_value);
      }
      $body_value[0]['value'] = $html_value;
      $entity->set('body', $body_value);
    }
  }
}

