<?php

/**
 * @file
 * Contains origins_common.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function origins_common_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the origins_common module.
    case 'help.page.origins_common':
      $output = '';
      $output .= '<h3>' . t("About") . '</h3>';
      $output .= '<p>' . t("A common set of Drupal components.") . '</p>';
      $output .= '<h4>' . t("Entity reference field HTML list display formatter") . '</h4>';
      $output .= '<p>' . t("Displays entity references as OL or UL HTML lists with the option of assigning a class to the list.");

      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_common_form_revision_overview_form_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  // Add a submit handler to the revision overview form to set
  // the view mode to 'diff' for revisions comparisons.
  $form['#submit'][] = '_origins_common_revision_overview_form_submit';
}

/**
 * Submit handler for revision overview form.
 *
 * Modifies the redirect URL for the revision overview form set in its
 * submitForm() handler
 * (see modules/contrib/diff/src/Form/RevisionOverviewForm.php)
 * and adds an additional view_mode=diff query param.
 */
function _origins_common_revision_overview_form_submit(array &$form, FormStateInterface $form_state) {
  // Get info about the entity we are doing a revision comparison on.
  $build_info = $form_state->getBuildInfo();
  $entity = $build_info['args'][0];
  $entity_type = $entity->getEntityTypeId();
  $bundle = $entity->bundle();

  // Get available view modes.
  $view_modes = \Drupal::service('entity_display.repository')->getViewModeOptionsByBundle($entity_type, $bundle);

  // If the diff view mode has been defined, add as a query param to the
  // redirect url for the revision comparison overview form.
  if (array_key_exists('diff', $view_modes)) {
    $redirect_url = $form_state->getRedirect()->setOption('query', [
      'view_mode' => 'diff',
    ]);
    $form_state->setRedirectUrl($redirect_url);
  }
}

/**
 * Implements hook_moderation_sidebar_alter().
 */
function origins_common_moderation_sidebar_alter(&$build, &$context) {
  if (!empty($build['actions']['secondary']['version_history'])) {
    $revisions_link = Link::createFromRoute(
      $build['actions']['secondary']['version_history']['#title']->__toString(),
      'entity.node.version_history',
      $build['actions']['secondary']['version_history']['#url']->getRouteParameters(),
      $build['actions']['secondary']['version_history']['#url']->getOptions()
    );

    // Replace the URL of revisions link with the updated Link Url object.
    if (!empty($build['actions']['secondary']['version_history']['#url'])) {
      $build['actions']['secondary']['version_history']['#url'] = $revisions_link->getUrl();
    }

    // Strip AJAX class to link direct to page.
    if (!empty($build['actions']['secondary']['version_history']['#attributes']['class'])) {
      $build['actions']['secondary']['version_history']['#attributes']['class'] = array_diff($build['actions']['secondary']['version_history']['#attributes']['class'], ['use-ajax']);
    }
  }

  if ($context instanceof Node && $context->getType() == 'webform') {
    // Fix obscure off-canvas JS bug by repointing the URL to the underlying
    // canonical test route name.
    if (!empty($build['actions']['secondary']['entity.node.webform.test_form'])) {
      $build['actions']['secondary']['entity.node.webform.test_form']['#url'] = Url::fromRoute(
        'entity.webform.test_form', ['webform' => $context->get('webform')->target_id]
      );
    }
  }
}

