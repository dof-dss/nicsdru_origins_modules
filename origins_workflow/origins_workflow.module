<?php

/**
 * @file
 * Contains code that amends the admin/content view.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;

/**
 * Implements hook_page_attachments().
 */
function origins_workflow_page_attachments(array &$attachments) {
  // Attach extra custom css for admin menu.
  $attachments['#attached']['library'][] = 'origins_workflow/admin.css';
}

/**
 * Implements hook_entity_presave().
 */
function origins_workflow_entity_presave(EntityInterface $entity) {
  // Get a list of audited content types.
  $config = \Drupal::config('origins_workflow.auditsettings');
  $audit_types = $config->get('audit_content_types');

  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    if (isset($audit_types[$entity->bundle()]) && ($audit_types[$entity->bundle()] == $entity->bundle())) {
      // We have just published a node type that is subject to auditing.
      if ($entity->isPublished() && $entity->hasField('field_next_audit_due')) {
        $next_audit_date = $entity->get('field_next_audit_due')->value;
        if (empty($next_audit_date)) {
          // No audit date set, set it for six months time.
          $entity->set('field_next_audit_due', date('Y-m-d', strtotime("+6 months")));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function origins_workflow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Manage access to 'next audit date' field.
  // Get a list of audited content types.
  $config = \Drupal::config('origins_workflow.auditsettings');
  $audit_types = $config->get('audit_content_types');
  $view_form_list = [];
  $edit_form_list = [];
  foreach ($audit_types as $this_type) {
    if ($this_type) {
      $view_form_list[] = 'node_' . $this_type . '_form';
      $edit_form_list[] = 'node_' . $this_type . '_edit_form';
    }
  }

  // Hide the audit date for everyone.
  if (isset($form['field_next_audit_due'])) {
    $form['field_next_audit_due']['#access'] = FALSE;
    return;
  }

  // Node edit forms.
  if (in_array($form_id, $edit_form_list)) {
    $account = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
    // Check user access level.
    if ($account->hasRole('administrator')) {
      // Admin can see audit date and change it.
      $form['field_next_audit_due']['#access'] = TRUE;
      $form['field_next_audit_due']['#disabled'] = FALSE;
    }
    elseif ($account->hasPermission('audit content')) {
      // If user has permission to audit content but is not an admin
      // then they can see the audit date but not change it.
      $form['field_next_audit_due']['#access'] = TRUE;
      $form['field_next_audit_due']['#disabled'] = TRUE;
    }
    else {
      // Hide the audit date for anyone else.
      $form['field_next_audit_due']['#access'] = FALSE;
    }
  }

  // Tweak the published filter on the admin/content form.
  if (($form_id == 'views_exposed_form') && ($form['#action'] == '/admin/content')) {
    $form['status']['#options'][0] = t('Unpublished');
    $form['status']['#options'][1] = t('Published');
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function origins_workflow_menu_links_discovered_alter(&$links) {
  // Add 'Site Themes', 'Scheduled' and 'GPs' options to the
  // dashboard menu if the nidirect_common module is installed.
  if (!in_array('origins_workflow.site_themes', $links)) {
    if (\Drupal::service('module_handler')->moduleExists('nidirect_common')) {
      $links['origins_workflow.scheduled_tab'] = [
        'title' => new TranslatableMarkup('Scheduled'),
        'route_name' => 'view.scheduler_scheduled_content.overview',
        'parent' => 'system.admin_content',
        'weight' => 5,
      ];
      $links['origins_workflow.gps'] = [
        'title' => new TranslatableMarkup('GPs'),
        'route_name' => 'entity.gp.collection',
        'parent' => 'system.admin_content',
        'weight' => 6,
      ];
    }
  }
  return $links;
}

/**
 * Implements hook_views_pre_render().
 */
function origins_workflow_views_pre_render(ViewExecutable $view) {
  if (isset($view->element['#name'])) {
    if ($view->element['#name'] == 'workflow_moderation') {
      // Hide one of the fields to set moderation state depending
      // on whether the user has 'publish' permission or not.
      origins_workflow_hide_moderation_field($view);
    }
    elseif ($view->element['#name'] == 'content') {
      // Remove the bulk operations from the admin/content
      // page for un-privileged users.
      // (May want to change this back to checking the permission
      // 'use editorial transition publish' once bulk operation bug
      // fixed - see D8NID-371 Jira ticket.)
      if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
        unset($view->field['node_bulk_form']);
      }
    }
  }
}

/**
 * Utility function for workflow views.
 */
function origins_workflow_hide_moderation_field(&$view) {
  // Hide one of the fields to set moderation state depending
  // on whether the user has 'publish' permission or not.
  if (!empty($view->element['#name']) && $view->element['#name'] == 'workflow_moderation') {
    $account_uid = \Drupal::currentUser()->id();
    $account = User::load($account_uid);
    if (($view->element['#display_id'] == 'my_drafts')
      || ($view->element['#display_id'] == 'all_drafts')) {
      // 'My Drafts' or 'All Drafts' display.
      if ($account->hasPermission('use editorial transition publish')) {
        // Show the field that has the 'Change to Publish' link.
        if (isset($view->field['nothing_1'])) {
          $view->field['nothing_1']->options['exclude'] = TRUE;
        }
      }
      else {
        // Hide the field that has the 'Change to Publish' link.
        if (isset($view->field['nothing'])) {
          $view->field['nothing']->options['exclude'] = TRUE;
        }
      }
    }
    else {
      // Hide the field that has the 'Change to Publish' link.
      if (isset($view->field['nothing'])) {
        $view->field['nothing']->options['exclude'] = TRUE;
      }
    }
  }
  elseif ($view->element['#display_id'] == 'needs_review') {
    // 'Needs review' display.
    if ($account->hasPermission('use editorial transition publish')) {
      // Show the field that has the 'Change to Publish' link.
      if (isset($view->field['nothing_3'])) {
        $view->field['nothing_3']->options['exclude'] = TRUE;
      }
    }
    else {
      // Hide the field that has the 'Change to Publish' link.
      if (isset($view->field['nothing'])) {
        $view->field['nothing']->options['exclude'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hides the 'Moderated Content' tab on the admin/content page.
 */
function origins_workflow_menu_local_tasks_alter(&$data, $route_name) {
  if (isset($data['tabs'][1]) && isset($data['tabs'][1]['content_moderation.moderated_content'])) {
    unset($data['tabs'][1]['content_moderation.moderated_content']);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function origins_workflow_preprocess_field(&$variables) {
  // Implement audit link.
  if (isset($variables['element'])
    && isset($variables['element']['#entity_type'])
    && ($variables['element']['#entity_type'] == 'node')
  ) {
    // We are only interested in certain content types.
    $content_type = $variables['element']['#bundle'];
    $msg = NULL;
    switch ($content_type) {
      case 'health_condition':
        $msg = _build_audit_link('health_condition', $variables);
        break;

      case 'article':
      case 'contact':
      case 'page':
        $msg = _build_audit_link('article', $variables);
        break;
    }
    if ($msg) {
      // Send out 'needs audit' link as a Drupal warning message.
      // N.B. This will only be visible if the 'System Messages'
      // block is visible.
      $this_route = \Drupal::routeMatch()->getRouteName();
      // Do not show audit message on revisions page.
      if ($this_route != 'diff.revisions_diff') {
        \Drupal::messenger()->addWarning(t($msg->jsonSerialize()));
        // Make sure that this page is not cached.
        $variables['#cache'] = ['max-age' => 0];
      }
    }
  }
}

/**
 * Top level function to build audit links.
 */
function _build_audit_link($type, &$variables) {
  // Get the current node.
  $node = Drupal::routeMatch()->getParameter('node');
  if (!empty($node)) {
    $nid = NULL;
    if (is_object($node) && ($node instanceof Node)) {
      $nid = $node->id();
    }
    elseif (is_string($node)) {
      $nid = $node;
      $node = Node::load($nid);
    }
    if (!empty($nid)) {
      if ($type == 'health_condition') {
        return _audit_link($type, $node->get('field_next_review_date')->value, $nid);
      }
      else {
        // This will be an article, contact or page.
        return _audit_link($type, $node->get('field_next_audit_due')->value, $nid);
      }
    }
  }
}

/**
 * Utility function to build the audit link html.
 */
function _audit_link($type, $dt, $nid) {
  if (!empty($dt) && (strtotime($dt) < Drupal::time()->getCurrentTime())) {
    // Next review date is in the past,
    // so this node is due for audit - display node edit link
    // (if the user is allowed to see it).
    $account = User::load(Drupal::currentUser()->id());
    if ($account->hasPermission('audit content')) {
      // Retrieve audit text from config.
      $audit_button_text = Drupal::config('origins_workflow.auditsettings')->get('audit_button_text');
      $audit_button_hover_text = Drupal::config('origins_workflow.auditsettings')->get('audit_button_hover_text');
      // Set up common attributes for links.
      $options = [
        'attributes' => [
          'rel' => 'nofollow',
          'title' => $audit_button_hover_text,
          'class' => 'audit_link',
        ],
      ];
      $link_object = NULL;
      if ($type == 'health_condition') {
        // For health conditions, just send the user to the node edit
        // form, where they can set the 'next review date' to a date
        // in the future to remove this node from the 'needs audit' view.
        $link_object = Link::createFromRoute($audit_button_text, 'entity.node.edit_form', ['node' => $nid], $options);
      }
      else {
        // For articles, contacts and pages send the user
        // to the 'content audit' page.
        $link_object = Link::createFromRoute($audit_button_text, 'origins_workflow.audit_controller_content_audit', ['nid' => $nid], $options);
      }
      if ($link_object) {
        // Return rendered link.
        $link_rendered = $link_object->toRenderable();
        \Drupal::service('renderer')->renderRoot($link_rendered);
        return $link_rendered['#markup'];
      }
      else {
        return "";
      }
    }
  }
}
