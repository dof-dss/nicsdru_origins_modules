<?php

/**
 * @file
 * Contains code that amends the admin/content view.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\NodeInterface;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;
use Drupal\workflows\TransitionInterface;

/**
 * Implements hook_page_attachments().
 */
function origins_workflow_page_attachments(array &$attachments) {
  // Attach library for dialogs.
  $attachments['#attached']['library'][] = 'origins_workflow/origins_workflow.dialogs';
  // Attach extra custom css for admin menu.
  $attachments['#attached']['library'][] = 'origins_workflow/admin.css';
}

/**
 * Implements hook_entity_presave().
 */
function origins_workflow_entity_presave(EntityInterface $entity) {
  // Get a list of audited content types.
  $config = \Drupal::config('origins_workflow.auditsettings');
  $audit_types = $config->get('audit_content_types');

  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    if (isset($audit_types[$entity->bundle()]) && ($audit_types[$entity->bundle()] == $entity->bundle())) {
      // We have just published a node type that is subject to auditing.
      if ($entity->isPublished() && $entity->hasField('field_next_audit_due')) {
        $next_audit_date = $entity->get('field_next_audit_due')->value;
        if (empty($next_audit_date)) {
          // No audit date set, set it for six months time.
          $entity->set('field_next_audit_due', date('Y-m-d', strtotime("+6 months")));
        }
      }
    }
  }

  // Processing to alter revision log messages and include the revision number.
  if ($entity instanceof NodeInterface && $entity instanceof RevisionLogInterface) {
    $source_revision_id = $entity->getLoadedRevisionId();
    $msgobj = $entity->getRevisionLogMessage();
    if (!empty($msgobj)) {
      $thismsg = ($msgobj instanceof TranslatableMarkup) ? $msgobj->getUntranslatedString() : $msgobj;
      if (!empty($thismsg)) {
        if (preg_match('/^Copy of the revision from/', $thismsg)) {
          $entity->setRevisionLogMessage(t('Copy of revision @rev', [
            '@rev' => $source_revision_id,
          ]));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function origins_workflow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the audit date for everyone.
  if (isset($form['field_next_audit_due'])) {
    $form['field_next_audit_due']['#access'] = FALSE;
  }

  // Default any moderation controls to 'Draft'.
  if (NestedArray::keyExists($form, ['moderation_state', 'widget', 0, 'state'])) {
    $moderation_value = &$form['moderation_state']['widget'][0]['state']['#default_value'];

    if ($moderation_value != 'draft') {
      $moderation_value = 'draft';
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_workflow_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add an extra validator to the node edit form.
  array_unshift($form['#validate'], '_origins_workflow_validate_path_alias');
}

/**
 * Provide extra validation for node edit form.
 */
function _origins_workflow_validate_path_alias(&$form, FormStateInterface $form_state) {
  // If this node has its moderation state set to 'archived' then make sure
  // that 'generate automatic alias' is un-checked and that the 'URL alias'
  // field is empty. This will make sure that there is no alias and hence
  // it will be possible to create a redirect to a replacement node if
  // necessary.
  $moderation_state = $form_state->getValue('moderation_state');

  if (!empty($moderation_state) && $form_state->getValue('moderation_state')[0]['value'] === 'archived') {
    $path_alias_settings = $form_state->getValue('path');
    $path_alias_settings[0]['alias'] = '';
    $path_alias_settings[0]['pathauto'] = 0;
    $form_state->setValue('path', $path_alias_settings);
  }
}

/**
 * Implements hook_form_taxonomy_term_form_alter().
 */
function origins_workflow_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add an extra validator to the term edit form.
  array_unshift($form['#validate'], '_origins_workflow_validate_term_path_alias');
}

/**
 * Provide extra validation for taxonomy term edit form.
 */
function _origins_workflow_validate_term_path_alias(&$form, FormStateInterface $form_state) {
  // If this term is unpublished then make sure
  // that 'generate automatic alias' is un-checked and that the 'URL alias'
  // field is empty. This will make sure that there is no alias and hence
  // it will be possible to create a redirect to a replacement term if
  // necessary.
  if ($form_state->getValue('status')['value'] == 0) {
    $path_alias_settings = $form_state->getValue('path');
    $path_alias_settings[0]['alias'] = '';
    $path_alias_settings[0]['pathauto'] = 0;
    $form_state->setValue('path', $path_alias_settings);
  }
}

/**
 * Implements hook_entity_update().
 */
function origins_workflow_entity_update(EntityInterface $entity) {
  // Note that this will only work if the module weighting of the
  // origins_workflow module is higher than that of the 'pathauto'
  // module. This is because the hook_entity_update in 'pathauto'
  // re-creates the alias, and the code in here deletes it !
  // We want the alias deletion to run last so that it really
  // is deleted.
  if (isset($entity->moderation_state)) {
    if (($entity->moderation_state->value == 'archived')
      && ($entity->original->moderation_state->value == 'published')) {
      // This node is being archived, so we need to delete the alias (which
      // will enable us to create redirects if we want to).
      if (!empty($entity->nid->value)) {
        // Get all aliases attached to this node.
        $path_alias_storage = \Drupal::entityTypeManager()->getStorage('path_alias');
        $alias_objects = $path_alias_storage->loadByProperties([
          'path' => '/node/' . $entity->nid->value,
          'langcode' => $entity->language()->getId()
        ]);
        // Delete all aliases for this node.
        $path_alias_storage->delete($alias_objects);
      }
    }
  }
  // Now add processing for moderation sidebar.
  _origins_workflow_menu_creation_check($entity);
}

/**
 * Check for menu creation.
 */
function _origins_workflow_menu_creation_check(EntityInterface $entity) {
  // If a node is published using the moderation sidebar it is possible
  // that menu creation might be overlooked. Code added here to rectify
  // this bug.
  $node_type = $entity->bundle();
  if (!in_array($node_type, ['menu_link_content', 'content_moderation_state'])) {
    $nid = $entity->id();
    // Collect the $_REQUEST params.
    $request = \Drupal::request()->request->all();
    // See if this update hook has been called from the moderation sidebar
    // and check if the page is being published.
    if (!empty($request['op']) && ($request['op'] == 'Publish')) {
      if (!empty($request['form_id']) && ($request['form_id'] == 'moderation_sidebar_quick_transition_form')) {
        // Can we see a menu entry for this node ?
        $existing_menu = MenuLinkContent::load($nid);
        if (empty($existing_menu)) {
          // Has a new menu entry been selected?
          $query = \Drupal::entityQuery('menu_link_content')
            ->accessCheck(TRUE)
            ->condition('link.uri', 'entity:node/' . $nid)
            ->sort('id', 'ASC')
            ->range(0, 1);
          $result = $query->execute();
          $id = (!empty($result)) ? reset($result) : FALSE;
          if ($id) {
            // New menu entry has been set up, activate it.
            $menu_link = MenuLinkContent::load($id);
            $menu_link->enabled->value = 1;
            $menu_link->save();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function origins_workflow_menu_links_discovered_alter(&$links) {
  // Add 'Site Themes', 'Scheduled' and 'GPs' options to the
  // dashboard menu if the nidirect_common module is installed.
  if (!in_array('origins_workflow.site_themes', $links)) {
    if (\Drupal::service('module_handler')->moduleExists('nidirect_common')) {
      if (\Drupal::service('module_handler')->moduleExists('scheduler')) {
        $links['origins_workflow.scheduled_tab'] = [
          'title' => new TranslatableMarkup('Scheduled'),
          'route_name' => 'view.scheduler_scheduled_content.overview',
          'parent' => 'system.admin_content',
          'weight' => 5,
        ];
      }

      $links['origins_workflow.gps'] = [
        'title' => new TranslatableMarkup('GPs'),
        'route_name' => 'entity.gp.collection',
        'parent' => 'system.admin_content',
        'weight' => 6,
      ];
    }
  }
  return $links;
}

/**
 * Implements hook_views_pre_render().
 */
function origins_workflow_views_pre_render(ViewExecutable $view) {
  if (isset($view->element['#name'])) {
    if ($view->element['#name'] == 'workflow_moderation') {
      // Hide one of the fields to set moderation state depending
      // on whether the user has 'publish' permission or not.
      origins_workflow_hide_moderation_field($view);
    }
    elseif ($view->element['#name'] == 'content') {
      // Remove the bulk operations from the admin/content
      // page for un-privileged users.
      // (May want to change this back to checking the permission
      // 'use editorial transition publish' once bulk operation bug
      // fixed - see D8NID-371 Jira ticket.)
      if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
        unset($view->field['node_bulk_form']);
      }
    }
  }
}

/**
 * Utility function for workflow views.
 */
function origins_workflow_hide_moderation_field(&$view) {
  if (empty($view->element['#name']) || $view->element['#name'] !== 'workflow_moderation') {
    return;
  }

  // Hide one of the fields to set moderation state depending
  // on whether the user has 'publish' permission or not.
  $account = \Drupal::currentUser();

  // 'My Drafts' and 'All Drafts' displays.
  if (($view->element['#display_id'] === 'my_drafts') || ($view->element['#display_id'] === 'all_drafts')) {
    // Show the 'Change to Publish' field if the user has that permission.
    if (isset($view->field['nothing_1']) && $account->hasPermission('use nics_editorial_workflow transition quick_publish')) {
      // Show the 'nothing' custom text field which has links for 'Change to Draft' / 'Change to Needs Review'
      // based on the current moderation state and always shows 'Change to Published'.
      $view->field['nothing_1']->options['exclude'] = TRUE;
      if (isset($view->field['nothing_2'])) {
        $view->field['nothing_2']->options['exclude'] = TRUE;
      }
    }
    elseif (isset($view->field['nothing_1']) && $account->hasPermission('use nics_editorial_workflow transition publish')) {
      // Show the 'nothing_2' custom text field which has links for 'Change to Draft' and 'Change to Published'
      // for nodes which have a state of 'Needs review'. For nodes in 'Draft' show 'Change to Needs Review'.
      $view->field['nothing_1']->options['exclude'] = TRUE;
      if (isset($view->field['nothing'])) {
        $view->field['nothing']->options['exclude'] = TRUE;
      }
    }
    elseif (isset($view->field['nothing'])) {
      // Show the 'nothing_1' custom text field which has links for 'Change to Draft' / 'Change to Needs Review'
      // based on the current moderation state and does not have a  'Change to Published' link.
      $view->field['nothing']->options['exclude'] = TRUE;
      if (isset($view->field['nothing_2'])) {
        $view->field['nothing_2']->options['exclude'] = TRUE;
      }
    }
  }

  // 'Needs Review' display.
  if ($view->element['#display_id'] === 'needs_review') {
    // Show the 'Change to Publish' field if the user has that permission.
    if (isset($view->field['nothing_3']) && $account->hasPermission('use nics_editorial_workflow transition publish')) {
      $view->field['nothing_3']->options['exclude'] = TRUE;
    }
    elseif (isset($view->field['nothing'])) {
      $view->field['nothing']->options['exclude'] = TRUE;
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hides the 'Moderated Content' tab on the admin/content page.
 */
function origins_workflow_menu_local_tasks_alter(&$data, $route_name) {
  if (isset($data['tabs'][1]) && isset($data['tabs'][1]['content_moderation.moderated_content'])) {
    unset($data['tabs'][1]['content_moderation.moderated_content']);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function origins_workflow_preprocess_field(&$variables) {
  // Implement audit link.
  if (isset($variables['element'])
    && isset($variables['element']['#entity_type'])
    && ($variables['element']['#entity_type'] == 'node')
  ) {
    // We are only interested in certain content types.
    $content_type = $variables['element']['#bundle'];
    // Get a list of audited content types.
    $config = \Drupal::config('origins_workflow.auditsettings');
    $audit_types = $config->get('audit_content_types');
    $msg = NULL;
    if (in_array($content_type, $audit_types)) {
      $msg = _build_audit_link($variables);
    }
    if ($msg) {
      // Send out 'needs audit' link as a Drupal warning message.
      // N.B. This will only be visible if the 'System Messages'
      // block is visible.
      $this_route = \Drupal::routeMatch()->getRouteName();
      // Do not show audit message on revisions page.
      if ($this_route != 'diff.revisions_diff') {
        \Drupal::messenger()->addWarning($msg->jsonSerialize());
        // Make sure that this page is not cached.
        $variables['#cache'] = ['max-age' => 0];
      }
    }
  }
}

/**
 * Top level function to build audit links.
 */
function _build_audit_link(&$variables) {
  // Get the current node.
  $node = Drupal::routeMatch()->getParameter('node');
  if (!empty($node)) {
    $nid = NULL;
    if (is_object($node) && ($node instanceof Node)) {
      $nid = $node->id();
    }
    elseif (is_string($node)) {
      $nid = $node;
      $node = Node::load($nid);
    }
    if (!empty($nid)) {
      if ($node->hasField('field_next_audit_due')) {
        return _audit_link('field_next_audit_due', $node->get('field_next_audit_due')->value, $nid);
      }
      elseif ($node->hasField('field_next_review_date')) {
        return _audit_link('field_next_review_date', $node->get('field_next_review_date')->value, $nid);
      }
    }
  }
}

/**
 * Utility function to build the audit link html.
 */
function _audit_link($field, $dt, $nid) {
  if (!empty($dt) && (strtotime($dt) < Drupal::time()->getCurrentTime())) {
    // Next review date is in the past,
    // so this node is due for audit - display node edit link
    // (if the user is allowed to see it).
    $account = User::load(Drupal::currentUser()->id());
    if ($account->hasPermission('audit content')) {
      // Retrieve audit text from config.
      $audit_button_text = Drupal::config('origins_workflow.auditsettings')->get('audit_button_text');
      $audit_button_hover_text = Drupal::config('origins_workflow.auditsettings')->get('audit_button_hover_text');
      // Set up common attributes for links.
      $options = [
        'attributes' => [
          'rel' => 'nofollow',
          'title' => $audit_button_hover_text,
          'class' => ['audit_link'],
        ],
      ];
      $link_object = NULL;
      if ($field == 'field_next_review_date') {
        // Just send the user to the node edit
        // form, where they can set the 'next review date' to a date
        // in the future to remove this node from the 'needs audit' view.
        $link_object = Link::createFromRoute($audit_button_text, 'entity.node.edit_form', ['node' => $nid], $options);
      }
      else {
        // Open 'content audit' page in an off-canvas dialog.
        $options['attributes']['class'][] = 'use-ajax';
        $options['attributes']['data-dialog-renderer'][] = 'off_canvas';
        $options['attributes']['data-dialog-type'][] = 'dialog';
        $link_object = Link::createFromRoute($audit_button_text, 'origins_workflow.audit_controller_content_audit', ['nid' => $nid], $options);
      }
      if ($link_object) {
        // Return rendered link.
        $link_rendered = $link_object->toRenderable();
        \Drupal::service('renderer')->renderRoot($link_rendered);
        return $link_rendered['#markup'];
      }
      else {
        return "";
      }
    }
  }
}

/**
 * Implements hook_preprocess_table().
 */
function origins_workflow_preprocess_table(&$variables) {

  // Preprocess node revisions table.
  // Making these changes in preprocess is not beautiful, but seems
  // to be the only workable solution as the 'diff' module has
  // already been enabled and has taken over the core route with
  // its own controller. If we created our own controller to do
  // this then we would have to call the contrib controller,
  // which does not sound like a good idea.
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.version_history') {

    // Get the current node we are showing revisions for.
    $node = \Drupal::routeMatch()->getParameter('node');

    // Add new 'Revision Number' column to the node revisions tab.
    $new_head = [
      'tag' => 'th',
      'content' => [
        '#markup' => t('Revision No.'),
      ],
    ];

    // Insert revision number column at the beginning.
    array_unshift($variables['header'], $new_head);

    // Tweak revision comparison column headings.
    if (isset($variables['header']['select_column_one'])) {
      $variables['header']['select_column_one']['content'] = ['#markup' => t('Compare revision 1')];
    }
    if (isset($variables['header']['select_column_two'])) {
      $variables['header']['select_column_two']['content'] = ['#markup' => t('Compare revision 2')];
    }

    // Set the column that contains 'action' links - it is normally the last cell in a row.
    $action_column = 1;
    if (!empty($variables['rows'][0]['cells'])) {
      $action_column = array_key_last($variables['rows'][0]['cells']);
    }

    // Loop through the rows and:
    // - tweak revert options.
    // - add 'Create Draft of Published' link to published revision.
    // - add the revision number column to each.
    foreach ($variables['rows'] as $idx => &$row) {

      $links = &$row['cells'][$action_column]['content']['#links'];

      // Work out the revision for this row.
      $this_revisionId = '';

      // If row has revert links...
      if (isset($links) && isset($links['revert'])) {

        $revert_link = &$links['revert'];

        // Cheekily extract this row's revision id from the 'revert' button link.
        $this_url = $revert_link['url'];
        if (isset($this_url)) {
          $this_revisionId = $this_url->getRouteParameters()['node_revision'];
        }

        // Tweak revert links.
        if ($revert_link['title']->getUntranslatedString() == 'Set as current revision') {
          // When content moderation is enabled, pending revisions have a revert link
          // with text "Set as current revision". But this is misleading. If a node's
          // current (or default) revision is a published revision, then reverting a
          // pending revision creates another revision that is the latest revision. It
          // does not become the current or default revision at all.
          // Note there are proposed changes in Drupal 9 which fix this very issue.
          // @see https://www.drupal.org/project/drupal/issues/2899719.
          $revert_link['title'] = t('Copy as latest revision');
        }
        else {
          // This must be a past revision.
          // Create a "Revert as draft" link in addition to the normal
          // Revert link. The normal revert link reverts a revision and
          // preserves the moderation state. Users often need to create
          // a draft of an old published revision and edit it before
          // publishing it again. Note there are proposed changes in
          // Drupal 9 which, if implemented, mean we no longer need this.
          // @see https://www.drupal.org/project/drupal/issues/2906568.

          // Just copy the existing revert link and modify it for our
          // "Revert as Draft" link.
          $revert_as_draft_link = $revert_link;
          $revert_as_draft_link['title'] = t('Revert as Draft');

          // Change the URL to our controller so we're creating a new draft of the revision selected,
          // rather than reverting to that revision + it's publish state.
          // Need to add a destination query parameter to override the redirect in the controller.
          $revert_as_draft_link['url'] = Url::fromRoute('origins_workflow.moderation_state_controller_revert_to_state',
            [
              'nid' => \Drupal::routeMatch()->getParameter('node')->id(),
              'vid' => $this_revisionId,
              'new_state' => 'draft'
            ],
            ['query' => ['destination' => \Drupal::request()->getPathInfo()]]
          );

          // Insert "Revert as draft" link after the revert link.
          array_splice($links, 1, 0, ['revert_to_draft' => $revert_as_draft_link]);
        }
      }
      else {
        // There are no 'revert' links in this row, therefore it must be the
        // current or default revision.
        $this_revisionId = $node->getRevisionId();
        // Add class to the row for the default revision
        // to indicate it's moderation state.
        $row['attributes']->addClass('revision-' . $node->get('moderation_state')->getValue()[0]['value']);

        // Create a "Create Draft of Published" link.
        _create_draft_link_for_revision($variables, $node, $idx, $row);
      }

      // Insert revision number column at the beginning.
      $new_col = ['tag' => 'td', 'content' => ['#markup' => $this_revisionId]];
      array_unshift($row['cells'], $new_col);
    }
  }
}

/**
 * Add a 'Create Draft of Published' link.
 */
function _create_draft_link_for_revision(&$variables, $node, $idx, $row) {
  // Does this user have permission to create drafts of published ?
  if (\Drupal::currentUser()->hasPermission('use nics_editorial_workflow transition draft_of_published')) {
    // Now change the 'Current Revision' markup to a
    // 'Create Draft of Published' link.
    if ($idx > 0) {
      // Just check that there is markup in there and no link (just in case
      // core has been updated in the meantime, in which case this fix may
      // not be needed).
      if (isset($row['cells'][3]['content']['#markup']) && !isset($row['cells'][3]['content']['#links'])) {
        $markup = $row['cells'][3]['content']['#markup'];
        // There is markup in there, just double check that
        // it says 'Current revision'.
        if ($markup->getUntranslatedString() == 'Current revision') {
          // Now go ahead and change the 'Current Revision' markup to a
          // 'Create Draft of Published' link.
          $variables['rows'][$idx]['cells'][3]['content']['#links'] = [
            'revert' =>
              [
                'title' => t('Create Draft of Published'),
                'url' => Url::fromRoute('origins_workflow.moderation_state_controller_new_draft_of_published',
                  ['nid' => $node->id()]),
              ],
          ];
          $variables['rows'][$idx]['cells'][3]['content']['#type'] = "operations";
          // Remove the markup.
          unset($variables['rows'][$idx]['cells'][3]['content']['#prefix']);
          unset($variables['rows'][$idx]['cells'][3]['content']['#markup']);
          unset($variables['rows'][$idx]['cells'][3]['content']['#suffix']);
        }
      }
    }
  }
}

/**
 * Implements hook_moderation_sidebar_alter().
 */
function origins_workflow_moderation_sidebar_alter(array &$build, EntityInterface $entity) {
  // Get current moderation state.
  $current_state = $entity->moderation_state->value;

  if ($current_state === 'published') {
    $dop_link_exists = NestedArray::keyExists(
      $build, ['actions', 'primary', 'quick_draft_form', 'draft_of_published']
    );

    if ($entity->isLatestRevision() && $dop_link_exists) {
      // Entity is published, but we have no forward revisions so hide the draft of published option.
      hide($build['actions']['primary']['quick_draft_form']['draft_of_published']);
    }
    else {
      // Retrieve alias for current node.
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $entity->id());
      // Redirect to current node view after changing state.
      $options = [
        'query' => [
          'destination' => $alias
        ],
      ];

      // Inject an option for 'Draft of published'.
      // This isn't added by the core workflow module as that only responds to
      // publish status rather than that in conjunction with available revisions.
      if (\Drupal::currentUser()->hasPermission('use nics_editorial_workflow transition draft_of_published')) {
        $dop_link = [
          '#type' => 'link',
          '#title' => Markup::create(t('Draft of published')),
          '#url' => Url::fromRoute(
            'origins_workflow.moderation_state_controller_new_draft_of_published', [
              'nid' => $entity->id(),
              'new_state' => 'draft_of_published'
            ], $options),
          '#attributes' => [
            'class' => [
              'moderation-sidebar-link',
              'button',
              'draft-of-published--link',
            ]
          ],
        ];

        $build['actions']['primary']['draft_of_published'] = $dop_link;
      }

      if (\Drupal::currentUser()->hasPermission('use nics_editorial_workflow transition archive')) {
        // Add an 'Archive' button to the moderation sidebar, as
        // it fails to do this in this case.
        $build['actions']['primary']['archive'] = [];
        $build['actions']['primary']['archive']['#title'] = Markup::create(t('Archive'));
        $build['actions']['primary']['archive']['#type'] = 'link';

        // Build URL to change state.
        $build['actions']['primary']['archive']['#url'] = Url::fromRoute('origins_workflow.moderation_state_controller_change_state',
          ['nid' => $entity->id(), 'new_state' => 'archived'],
          $options);
        // Style as a button in the moderation sidebar.
        $build['actions']['primary']['archive']['#attributes'] = [
          'class' => ['moderation-sidebar-link', 'button', 'archive--link']
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function origins_workflow_preprocess_page(&$variables) {
  // Add js to node view pages to fake a moderation
  // sidebar 'archive' button that is missing.
  $this_route = \Drupal::routeMatch()->getRouteName();
  if ($this_route === 'entity.node.canonical') {
    $variables['#attached']['library'][] = 'origins_workflow/moderation_sidebar_fix';
  }
}

/**
 * Implements hook_entity_operation().
 */
function origins_workflow_entity_operation(EntityInterface $entity) {
  if ($entity instanceof NodeInterface === FALSE) {
    return;
  }

  // Only apply on the moderation views routes.
  if (!preg_match('/^view.workflow_moderation./', \Drupal::routeMatch()->getRouteName())) {
    return;
  }

  $operations = [];

  // Add an operation to view the moderation history of this content.
  if (\Drupal::currentUser()->hasPermission('view ' . $entity->bundle() . ' revisions')) {
    $operations['view_moderation_history'] = [
      'title' => \t('View moderation history'),
      'url' => Url::fromRoute('entity.node.version_history', ['node' => $entity->id()]),
      // Scheduled_transitions begins at 50 so place this just above.
      'weight' => 49,
    ];
  }

  // There's no combined permission check to assess valid transitions against
  // specific node types. So we check the user's ability to more broadly administer
  // this node type before we try and build custom links to toggle moderation states.
  if (\Drupal::currentUser()->hasPermission('create ' . $entity->bundle() . ' content')) {
    // Use the core service to fetch the permissable transitions based
    // on underlying configuration and active user object.
    $transitions = \Drupal::service('content_moderation.state_transition_validation')
      ->getValidTransitions($entity, \Drupal::currentUser());

    // Remove the current moderation status from the list of possible transitions.
    // Quick publish isn't detected as an equivalent operation/status as published
    // so we prune it off here for now as it makes no sense ot quick publish an
    // already published piece of content.
    $revision_id = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getLatestRevisionId($entity->id());
    $revision_moderation_state = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadRevision($revision_id)
      ->moderation_state->value;

    $node_moderation_state = $entity->moderation_state->value;

    if ($revision_moderation_state === 'published') {
      unset($transitions['quick_publish']);
    }

    // We're going to use the permitted transitions returned above
    // to create a collection of Url objects which we'll use to inject
    // into the links collection. That allows editors to then select specific
    // tasks to occur from a single location.

    // Magic numbers... scheduled_transitions.module starts at 50 so a few
    // between that and 0 (we want the 'Edit' link first) is fine.
    $weight = 40;
    foreach ($transitions as $id => $transition) {
      if ($transition instanceof TransitionInterface === FALSE) {
        // Skip over the transition if it's something other than
        // a Transition object or something that implements that interface.
        continue;
      }

      if ($transition->to()->id() === $revision_moderation_state) {
        // Don't present link to change moderation state to the current value.
        continue;
      }

      $url = Url::fromRoute('origins_workflow.moderation_state_controller_change_state', [
        'nid' => $entity->id(),
        'new_state' => $transition->to()->id(),
      ],
        [
          'query' => [
            'destination' => \Drupal::destination()->get(),
            // Confirm query parameter triggers a message back to the user from the controller.
            'confirm' => TRUE,
          ]
        ]);

      $operations['change_to_' . $transition->to()->id()] = [
        'title' => \t('Change to @label', ['@label' => $transition->to()->label()]),
        'url' => $url,
        'weight' => $weight,
      ];

      $weight--;
    }
  }
  return $operations;
}
