<?php

/**
 * @file
 * Contains code that amends the admin/content view.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\RevisionLogInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Url;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\Core\Link;

/**
 * Implements hook_page_attachments().
 */
function origins_workflow_page_attachments(array &$attachments) {
  // Attach extra custom css for admin menu.
  $attachments['#attached']['library'][] = 'origins_workflow/admin.css';
}

/**
 * Implements hook_entity_presave().
 */
function origins_workflow_entity_presave(EntityInterface $entity) {
  // Get a list of audited content types.
  $config = \Drupal::config('origins_workflow.auditsettings');
  $audit_types = $config->get('audit_content_types');

  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    if (isset($audit_types[$entity->bundle()]) && ($audit_types[$entity->bundle()] == $entity->bundle())) {
      // We have just published a node type that is subject to auditing.
      if ($entity->isPublished() && $entity->hasField('field_next_audit_due')) {
        $next_audit_date = $entity->get('field_next_audit_due')->value;
        if (empty($next_audit_date)) {
          // No audit date set, set it for six months time.
          $entity->set('field_next_audit_due', date('Y-m-d', strtotime("+6 months")));
        }
      }
    }
  }

  // Processing to alter revision log messages and include the revision number.
  if ($entity instanceof ContentEntityInterface && $entity instanceof RevisionLogInterface) {
    $source_revision_id = $entity->getLoadedRevisionId();
    $msgobj = $entity->getRevisionLogMessage();
    if (!empty($msgobj)) {
      $thismsg = ($msgobj instanceof TranslatableMarkup) ? $msgobj->getUntranslatedString() : $msgobj;
      if (!empty($thismsg)) {
        if (preg_match('/^Copy of the revision from/', $thismsg)) {
          $entity->setRevisionLogMessage(t('Copy of revision @rev', [
            '@rev' => $source_revision_id,
          ]));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function origins_workflow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Hide the audit date for everyone.
  if (isset($form['field_next_audit_due'])) {
    $form['field_next_audit_due']['#access'] = FALSE;
  }

  // Default any moderation controls to 'Draft'.
  if (NestedArray::keyExists($form, ['moderation_state', 'widget', 0, 'state'])) {
    $moderation_value = &$form['moderation_state']['widget'][0]['state']['#default_value'];

    if ($moderation_value != 'draft') {
      $moderation_value = 'draft';
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function origins_workflow_menu_links_discovered_alter(&$links) {
  // Add 'Site Themes', 'Scheduled' and 'GPs' options to the
  // dashboard menu if the nidirect_common module is installed.
  if (!in_array('origins_workflow.site_themes', $links)) {
    if (\Drupal::service('module_handler')->moduleExists('nidirect_common')) {
      $links['origins_workflow.scheduled_tab'] = [
        'title' => new TranslatableMarkup('Scheduled'),
        'route_name' => 'view.scheduler_scheduled_content.overview',
        'parent' => 'system.admin_content',
        'weight' => 5,
      ];
      $links['origins_workflow.gps'] = [
        'title' => new TranslatableMarkup('GPs'),
        'route_name' => 'entity.gp.collection',
        'parent' => 'system.admin_content',
        'weight' => 6,
      ];
    }
  }
  return $links;
}

/**
 * Implements hook_views_pre_render().
 */
function origins_workflow_views_pre_render(ViewExecutable $view) {
  if (isset($view->element['#name'])) {
    if ($view->element['#name'] == 'workflow_moderation') {
      // Hide one of the fields to set moderation state depending
      // on whether the user has 'publish' permission or not.
      origins_workflow_hide_moderation_field($view);
    }
    elseif ($view->element['#name'] == 'content') {
      // Remove the bulk operations from the admin/content
      // page for un-privileged users.
      // (May want to change this back to checking the permission
      // 'use editorial transition publish' once bulk operation bug
      // fixed - see D8NID-371 Jira ticket.)
      if (!in_array('administrator', \Drupal::currentUser()->getRoles())) {
        unset($view->field['node_bulk_form']);
      }
    }
  }
}

/**
 * Utility function for workflow views.
 */
function origins_workflow_hide_moderation_field(&$view) {
  if (empty($view->element['#name']) || $view->element['#name'] !== 'workflow_moderation') {
    return;
  }

  // Hide one of the fields to set moderation state depending
  // on whether the user has 'publish' permission or not.
  $account = \Drupal::currentUser();

  // 'My Drafts' and 'All Drafts' displays.
  if (($view->element['#display_id'] === 'my_drafts') || ($view->element['#display_id'] === 'all_drafts')) {
    // Show the 'Change to Publish' field if the user has that permission.
    if (isset($view->field['nothing_1']) && $account->hasPermission('use nics_editorial_workflow transition quick_publish')) {
      // Show the 'nothing' custom text field which has links for 'Change to Draft' / 'Change to Needs Review'
      // based on the current moderation state and always shows 'Change to Published'.
      $view->field['nothing_1']->options['exclude'] = TRUE;
      if (isset($view->field['nothing_2'])) {
        $view->field['nothing_2']->options['exclude'] = TRUE;
      }
    }
    elseif (isset($view->field['nothing_1']) && $account->hasPermission('use nics_editorial_workflow transition publish')) {
      // Show the 'nothing_2' custom text field which has links for 'Change to Draft' and 'Change to Published'
      // for nodes which have a state of 'Needs review'. For nodes in 'Draft' show 'Change to Needs Review'.
      $view->field['nothing_1']->options['exclude'] = TRUE;
      if (isset($view->field['nothing'])) {
        $view->field['nothing']->options['exclude'] = TRUE;
      }
    }
    elseif (isset($view->field['nothing'])) {
      // Show the 'nothing_1' custom text field which has links for 'Change to Draft' / 'Change to Needs Review'
      // based on the current moderation state and does not have a  'Change to Published' link.
      $view->field['nothing']->options['exclude'] = TRUE;
      if (isset($view->field['nothing_2'])) {
        $view->field['nothing_2']->options['exclude'] = TRUE;
      }
    }
  }

  // 'Needs Review' display.
  if ($view->element['#display_id'] === 'needs_review') {
    // Show the 'Change to Publish' field if the user has that permission.
    if (isset($view->field['nothing_3']) && $account->hasPermission('use nics_editorial_workflow transition publish')) {
      $view->field['nothing_3']->options['exclude'] = TRUE;
    }
    elseif (isset($view->field['nothing'])) {
      $view->field['nothing']->options['exclude'] = TRUE;
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hides the 'Moderated Content' tab on the admin/content page.
 */
function origins_workflow_menu_local_tasks_alter(&$data, $route_name) {
  if (isset($data['tabs'][1]) && isset($data['tabs'][1]['content_moderation.moderated_content'])) {
    unset($data['tabs'][1]['content_moderation.moderated_content']);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function origins_workflow_preprocess_field(&$variables) {
  // Implement audit link.
  if (isset($variables['element'])
    && isset($variables['element']['#entity_type'])
    && ($variables['element']['#entity_type'] == 'node')
  ) {
    // We are only interested in certain content types.
    $content_type = $variables['element']['#bundle'];
    // Get a list of audited content types.
    $config = \Drupal::config('origins_workflow.auditsettings');
    $audit_types = $config->get('audit_content_types');
    $msg = NULL;
    if (in_array($content_type, $audit_types)) {
      $msg = _build_audit_link($variables);
    }
    if ($msg) {
      // Send out 'needs audit' link as a Drupal warning message.
      // N.B. This will only be visible if the 'System Messages'
      // block is visible.
      $this_route = \Drupal::routeMatch()->getRouteName();
      // Do not show audit message on revisions page.
      if ($this_route != 'diff.revisions_diff') {
        \Drupal::messenger()->addWarning($msg->jsonSerialize());
        // Make sure that this page is not cached.
        $variables['#cache'] = ['max-age' => 0];
      }
    }
  }
}

/**
 * Top level function to build audit links.
 */
function _build_audit_link(&$variables) {
  // Get the current node.
  $node = Drupal::routeMatch()->getParameter('node');
  if (!empty($node)) {
    $nid = NULL;
    if (is_object($node) && ($node instanceof Node)) {
      $nid = $node->id();
    }
    elseif (is_string($node)) {
      $nid = $node;
      $node = Node::load($nid);
    }
    if (!empty($nid)) {
      if ($node->hasField('field_next_audit_due')) {
        return _audit_link('field_next_audit_due', $node->get('field_next_audit_due')->value, $nid);
      }
      elseif ($node->hasField('field_next_review_date')) {
        return _audit_link('field_next_review_date', $node->get('field_next_review_date')->value, $nid);
      }
    }
  }
}

/**
 * Utility function to build the audit link html.
 */
function _audit_link($field, $dt, $nid) {
  if (!empty($dt) && (strtotime($dt) < Drupal::time()->getCurrentTime())) {
    // Next review date is in the past,
    // so this node is due for audit - display node edit link
    // (if the user is allowed to see it).
    $account = User::load(Drupal::currentUser()->id());
    if ($account->hasPermission('audit content')) {
      // Retrieve audit text from config.
      $audit_button_text = Drupal::config('origins_workflow.auditsettings')->get('audit_button_text');
      $audit_button_hover_text = Drupal::config('origins_workflow.auditsettings')->get('audit_button_hover_text');
      // Set up common attributes for links.
      $options = [
        'attributes' => [
          'rel' => 'nofollow',
          'title' => $audit_button_hover_text,
          'class' => 'audit_link',
        ],
      ];
      $link_object = NULL;
      if ($field == 'field_next_review_date') {
        // Just send the user to the node edit
        // form, where they can set the 'next review date' to a date
        // in the future to remove this node from the 'needs audit' view.
        $link_object = Link::createFromRoute($audit_button_text, 'entity.node.edit_form', ['node' => $nid], $options);
      }
      else {
        // Send the user to the 'content audit' page.
        $link_object = Link::createFromRoute($audit_button_text, 'origins_workflow.audit_controller_content_audit', ['nid' => $nid], $options);
      }
      if ($link_object) {
        // Return rendered link.
        $link_rendered = $link_object->toRenderable();
        \Drupal::service('renderer')->renderRoot($link_rendered);
        return $link_rendered['#markup'];
      }
      else {
        return "";
      }
    }
  }
}

/**
 * Implements hook_preprocess_table().
 */
function origins_workflow_preprocess_table(&$variables) {
  // Add new 'Revision Number' column to the node revisions tab.
  //
  // Making this change in preprocess is not beautiful, but seems
  // to be the only workable solution as the 'diff' module has
  // already been enabled and has taken over the core route with
  // its own controller. If we created our own controller to do
  // this then we would have to call the contrib controller,
  // which does not sound like a good idea.
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.version_history') {
    // Add 'Revision Number' column header.
    $new_head = [
      'tag' => 'th',
      'content' => [
        '#markup' => t('Revision number'),
      ],
    ];

    // Insert this new column after the first one.
    // Use array_splice as we don't know exactly how many columns there will be
    // (and this code should work whether the 'diff' module has been enabled or
    // not).
    array_splice($variables['header'], 1, 0, [$new_head]);
    if (isset($variables['header']['select_column_one'])) {
      $variables['header']['select_column_one']['content'] = ['#markup' => t('Compare revision 1')];
    }
    if (isset($variables['header']['select_column_two'])) {
      $variables['header']['select_column_two']['content'] = ['#markup' => t('Compare revision 2')];
    }
    // Check whether the 'diff' module has been installed and set the
    // column for the 'action' links accordingly.
    $action_column = 1;
    if (\Drupal::moduleHandler()->moduleExists('diff')) {
      $action_column = 3;
    }
    // Loop through the rows and add the revision number column to each.
    foreach ($variables['rows'] as $idx => $row) {
      $this_version = '';
      if (isset($row['cells'][$action_column]['content']['#links'])) {
        // Cheekily extract current revision from the 'revert' button link.
        $this_url = $row['cells'][$action_column]['content']['#links']['revert']['url'];
        if (isset($this_url)) {
          $this_version = $this_url->getRouteParameters()['node_revision'];
        }
      }
      else {
        // There is no 'revert' button in this row, therefore it must be the
        // current versionand we need to add a 'Create Draft of Published' link.
        $this_version = _create_draft_link_for_revision($variables, $idx, $row);
      }
      $new_col = ['tag' => 'td', 'content' => ['#markup' => $this_version]];
      // Insert this new column after the first one.
      // Use array_splice as we don't know exactly how many columns there
      // will be (and this code should work whether the 'diff' module has
      // been enabled or not).
      array_splice($variables['rows'][$idx]['cells'], 1, 0, [$new_col]);
    }
  }
}

/**
 * Add a 'Create Draft of Published' link.
 */
function _create_draft_link_for_revision(&$variables, $idx, $row) {
  // Cannot manage to extract the revision id from this row
  // anywhere so we'll (reluctantly) have to load up the full node.
  $node = \Drupal::routeMatch()->getParameter('node');
  $this_version = $node->getRevisionId();
  // Does this user have permission to create drafts of published ?
  if (\Drupal::currentUser()->hasPermission('use nics_editorial_workflow transition draft_of_published')) {
    // Now change the 'Current Revision' markup to a
    // 'Create Draft of Published' link.
    if ($idx > 0) {
      // Just check that there is markup in there and no link (just in case
      // core has been updated in the meantime, in which case this fix may
      // not be needed).
      if (isset($row['cells'][3]['content']['#markup']) && !isset($row['cells'][3]['content']['#links'])) {
        $markup = $row['cells'][3]['content']['#markup'];
        // There is markup in there, just double check that
        // it says 'Current revision'.
        if ($markup->getUntranslatedString() == 'Current revision') {
          // Now go ahead and change the 'Current Revision' markup to a
          // 'Create Draft of Published' link.
          $variables['rows'][$idx]['cells'][3]['content']['#links'] = [
            'revert' =>
              [
                'title' => t('Create Draft of Published'),
                'url' => Url::fromRoute('origins_workflow.moderation_state_controller_new_draft_of_published',
                  ['nid' => $node->id()]),
              ],
          ];
          $variables['rows'][$idx]['cells'][3]['content']['#type'] = "operations";
          // Remove the markup.
          unset($variables['rows'][$idx]['cells'][3]['content']['#prefix']);
          unset($variables['rows'][$idx]['cells'][3]['content']['#markup']);
          unset($variables['rows'][$idx]['cells'][3]['content']['#suffix']);
        }
      }
    }
  }
  return $this_version;
}

/**
 * Implements hook_moderation_sidebar_alter().
 */
function origins_workflow_moderation_sidebar_alter(array &$build, EntityInterface $entity) {
  // Get current moderation state.
  $current_state = $entity->moderation_state->value;
  // Special case if this node is published but
  // we are not looking at the latest revision.
  if (($current_state == 'published') && !$entity->isLatestRevision()) {
    if (\Drupal::currentUser()->hasPermission('use nics_editorial_workflow transition archive')) {
      // Add an 'Archive' button to the moderation sidebar, as
      // it fails to do this in this case.
      $build['actions']['primary']['archive'] = [];
      $build['actions']['primary']['archive']['#title'] = Markup::create('Archive');
      $build['actions']['primary']['archive']['#type'] = "link";
      // Retrieve alias for current node.
      $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $entity->id());
      // Redirect to current node view after changing state.
      $options = [
        'query' => [
          'destination' => $alias
        ],
      ];
      // Build URL to change state.
      $build['actions']['primary']['archive']['#url'] = Url::fromRoute('origins_workflow.moderation_state_controller_change_state',
        ['nid' => $entity->id(), 'new_state' => 'archived'],
        $options);
      // Style as a button in the moderation sidebar.
      $build['actions']['primary']['archive']['#attributes'] = [
        'class' => ['moderation-sidebar-link', 'button', 'archive-link']
      ];
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function origins_workflow_preprocess_page(&$variables) {
  // Add js to node view pages to fake a moderation
  // sidebar 'archive' button that is missing.
  $this_route = \Drupal::routeMatch()->getRouteName();
  if ($this_route == 'entity.node.canonical') {
    $variables['#attached']['library'][] = 'origins_workflow/moderation_sidebar_fix';
  }
}
