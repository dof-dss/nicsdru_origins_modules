<?php

/**
 * @file
 * Contains code that provides user dashboard.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\views\ViewExecutable;
use Drupal\user\Entity\User;

/**
 * Implements hook_page_attachments().
 */
function origins_workflow_page_attachments(array &$attachments) {
  // Attach extra custom css for admin menu.
  $attachments['#attached']['library'][] = 'origins_workflow/admin.css';
}

/**
 * Implements hook_entity_presave().
 */
function origins_workflow_entity_presave(EntityInterface $entity) {
  // Get a list of audited content types.
  $config = \Drupal::config('origins_workflow.auditsettings');
  $audit_types = $config->get('audit_content_types');

  // This will fire when nodes are created or edited.
  if ($entity->getEntityTypeId() == 'node') {
    if (isset($audit_types[$entity->bundle()]) && ($audit_types[$entity->bundle()] == $entity->bundle())) {
      // We have just published a node type that is subject to auditing.
      if ($entity->isPublished() && $entity->hasField('field_next_audit_due')) {
        $next_audit_date = $entity->get('field_next_audit_due')->value;
        if (empty($next_audit_date)) {
          // No audit date set, set it for six months time.
          $entity->set('field_next_audit_due', date('Y-m-d', strtotime("+6 months")));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function origins_workflow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Manage access to 'next audit date' field.
  // Get a list of audited content types.
  $config = \Drupal::config('origins_workflow.auditsettings');
  $audit_types = $config->get('audit_content_types');
  $view_form_list = [];
  $edit_form_list = [];
  foreach ($audit_types as $this_type) {
    if ($this_type) {
      $view_form_list[] = 'node_' . $this_type . '_form';
      $edit_form_list[] = 'node_' . $this_type . '_edit_form';
    }
  }

  // Node add forms.
  if (in_array($form_id, $view_form_list)) {
    // Hide the audit date for everyone.
    $form['field_next_audit_due']['#access'] = FALSE;
    return;
  }

  // Node edit forms.
  if (in_array($form_id, $edit_form_list)) {
    $account = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
    // Check user access level.
    if ($account->hasRole('administrator')) {
      // Admin can see audit date and change it.
      $form['field_next_audit_due']['#access'] = TRUE;
      $form['field_next_audit_due']['#disabled'] = FALSE;
    }
    elseif ($account->hasPermission('audit content')) {
      // If user has permission to audit content but is not an admin
      // then they can see the audit date but not change it.
      $form['field_next_audit_due']['#access'] = TRUE;
      $form['field_next_audit_due']['#disabled'] = TRUE;
    }
    else {
      // Hide the audit date for anyone else.
      $form['field_next_audit_due']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function origins_workflow_menu_links_discovered_alter(&$links) {
  // Add  'Site Themes', 'Scheduled' and 'GPs' options to the
  // dashboard menu if the nidirect_site_themes module is installed.
  if (!in_array('origins_workflow.site_themes', $links)) {
    if (\Drupal::service('module_handler')->moduleExists('nidirect_site_themes')) {
      $links['origins_workflow.site_themes'] = [
        'title' => new TranslatableMarkup('Site Themes'),
        'route_name' => 'nidirect_site_themes.site_theme_controller_disp',
        'parent' => 'system.admin_content',
        'weight' => -99,
      ];
      $links['origins_workflow.scheduled_tab'] = [
        'title' => new TranslatableMarkup('Scheduled'),
        'route_name' => 'view.scheduler_scheduled_content.overview',
        'parent' => 'system.admin_content',
        'weight' => 5,
      ];
      $links['origins_workflow.gps'] = [
        'title' => new TranslatableMarkup('GPs'),
        'route_name' => 'entity.gp.collection',
        'parent' => 'system.admin_content',
        'weight' => 6,
      ];
    }
  }
  return $links;
}

/**
 * Implements hook_views_pre_render().
 */
function origins_workflow_views_pre_render(ViewExecutable $view) {
  if (isset($view->element['#name'])) {
    if ($view->element['#name'] == 'workflow_moderation') {
      // Hide one of the fields to set moderation state depending
      // on whether the user has 'publish' permission or not.
      origins_workflow_hide_moderation_field($view);
    }
    elseif ($view->element['#name'] == 'content') {
      // Remove the bulk operations from the admin/content
      // page for un-privileged users.
      $account_uid = \Drupal::currentUser()->id();
      $account = User::load($account_uid);
      if (!$account->hasPermission('use editorial transition publish')) {
        unset($view->field['node_bulk_form']);
      }
    }
  }
}

/**
 * Utility function for workflow views.
 */
function origins_workflow_hide_moderation_field(&$view) {
  // Hide one of the fields to set moderation state depending
  // on whether the user has 'publish' permission or not.
  if (!empty($view->element['#name']) && $view->element['#name'] == 'workflow_moderation') {
    $account_uid = \Drupal::currentUser()->id();
    $account = User::load($account_uid);
    if (($view->element['#display_id'] == 'my_drafts')
      || ($view->element['#display_id'] == 'all_drafts')) {
      // 'My Drafts' or 'All Drafts' display.
      if ($account->hasPermission('use editorial transition publish')) {
        // Show the field that has the 'Change to Publish' link.
        $view->field['nothing_1']->options['exclude'] = TRUE;
      }
      else {
        // Hide the field that has the 'Change to Publish' link.
        $view->field['nothing']->options['exclude'] = TRUE;
      }
    }
    else {
      // Hide the field that has the 'Change to Publish' link.
      $view->field['nothing']->options['exclude'] = TRUE;
    }
  }
  elseif ($view->element['#display_id'] == 'needs_review') {
    // 'Needs review' display.
    if ($account->hasPermission('use editorial transition publish')) {
      // Show the field that has the 'Change to Publish' link.
      $view->field['nothing_3']->options['exclude'] = TRUE;
    }
    else {
      // Hide the field that has the 'Change to Publish' link.
      $view->field['nothing']->options['exclude'] = TRUE;
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Hides the 'Moderated Content' tab on the admin/content page.
 */
function origins_workflow_menu_local_tasks_alter(&$data, $route_name) {
  if (isset($data['tabs'][1]) && isset($data['tabs'][1]['content_moderation.moderated_content'])) {
    unset($data['tabs'][1]['content_moderation.moderated_content']);
  }
}
