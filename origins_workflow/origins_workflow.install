<?php

/**
 * @file
 * Install, update and uninstall functions for the origins workflow module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this module.
 */
function origins_workflow_install() {
  // Assign a weight 1 higher than pathauto to ensure that alias
  // handling in origins_workflow_entity_update is not negated
  // by post save processing in pathauto.
  module_set_weight('origins_workflow', 2);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Create some test users for the Nightwatch tests that will come along later.
  $name_list = [
    '_author' => 'author_user',
    '_authenticated' => '',
    '_super' => 'supervisor_user',
    '_admin' => 'administrator',
    '_editor' => 'editor_user',
    '_gp_author' => 'gp_author_user',
    '_gp_super' => 'gp_supervisor_user',
    '_news_super' => 'news_supervisor',
    '_admin_user' => 'admin_user',
    '_apps' => 'apps_user',
    '_hc_author' => 'health_condition_author_user',
    '_hc_super' => 'health_condition_supervisor_user'
  ];
  // Get a list of current roles in Drupal.
  $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
  $role_name_list = [];
  foreach ($roles as $thisrole) {
    $role_name_list[] = strtolower(str_replace(' ','_',$thisrole->label()));
  }
  foreach ($name_list as $name => $role) {
    // Don't try to create user unless role exists.
    if (!in_array($role, $role_name_list) && !empty($role)) {
      continue;
    }
    // Add prefix from environment var.
    $prefix = getenv('NW_TEST_USER_PREFIX');
    $password = getenv('TEST_PASS');
    // If prefix not set, do not create users.
    if (empty($prefix) || empty($password)) {
      \Drupal::logger('origins_workflow')->notice(
        'No test users created, prefix and password environment vars must be set.');
      return;
    }
    $name = strtolower($prefix) . $name;
    $user = user_load_by_name($name);
    if (empty($user)) {
      \Drupal::logger('origins_workflow')->notice(t('Creating user @name', ['@name' => $name]));
      $user = User::create([
        'name' => $name,
        'mail' => $name . '@localhost',
        'status' => 1,
        'pass' => $password,
        'roles' => [$role, 'authenticated', 'qa'],
      ]);
      $user->save();
    }
    else {
      \Drupal::logger('origins_workflow')->notice(
        'Did not create user @name as already exists.', ['@name' => $name]);
    }
  }
}

/**
 * Implements hook_uninstall().
 *
 * Perform actions to set up the site for this module.
 */
function origins_workflow_uninstall() {
  // Delete any users created in hook_install.
  $name_list = [
    '_author' => 'author_user',
    '_authenticated' => '',
    '_super' => 'supervisor_user',
    '_admin' => 'administrator',
    '_editor' => 'editor_user',
    '_gp_author' => 'gp_author_user',
    '_gp_super' => 'gp_supervisor_user',
    '_news_super' => 'news_supervisor',
    '_admin_user' => 'admin_user',
    '_apps' => 'apps_user',
    '_hc_author' => 'health_condition_author_user',
    '_hc_super' => 'health_condition_supervisor_user'
  ];
  foreach ($name_list as $name => $role) {
    // Add prefix from environment var.
    $prefix = getenv('NW_TEST_USER_PREFIX');
    $name = strtolower($prefix) . $name;
    $user = user_load_by_name($name);

    if ($user instanceof UserInterface) {
      \Drupal::logger('origins_workflow')->notice(t('Deleting user @name', ['@name' => $name]));
      $user->delete();
    }
  }
}


/**
 * Helper function to be called from an update hook
 * when the workflow View config requires updating.
 */
function origins_workflow_update_view() {
  $module_config_path = \Drupal::service('extension.list.module')->getPath('origins_workflow') . '/config/install';
  $active_storage = \Drupal::service('config.storage');
  $file_storage = \Drupal::service('config.storage.sync');

  $source = new FileStorage($module_config_path);
  $workflow_view = $source->read('views.view.workflow_moderation');

  if (is_array($workflow_view)) {
    // Update the current active config.
    $active_storage->write('views.view.workflow_moderation', $workflow_view);

    // Update the local config in the sync directory.
    $file_storage->write('views.view.workflow_moderation', $workflow_view);
  }
}

/**
 * Update View to include link to latest draft.
 */
function origins_workflow_update_91001() {
  $config_path = \Drupal::service('extension.list.module')->getPath('origins_workflow') . '/config/install';
  $active_storage = \Drupal::service('config.storage');

  $source = new FileStorage($config_path);
  $view_contents = $source->read('views.view.workflow_moderation');
  if (is_array($view_contents)) {
    $active_storage->write('views.view.workflow_moderation', $view_contents);
  }
}

/**
 * Update View to include link to latest draft.
 */
function origins_workflow_update_91002() {
  origins_workflow_update_view();
}
