<?php

/**
 * @file
 * Contains origins_media.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\file\Entity\File;
use Drupal\file\FileInterface;
use Drupal\media\MediaInterface;
use Drupal\origins_media\Element\ManagedFileTrustedCallback;
use Drupal\origins_media\GeoLocationFormElementRenderer;
use Drupal\views\Render\ViewsRenderPipelineMarkup;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_element_info_alter().
 */
function origins_media_element_info_alter(array &$info) {
  if (\Drupal::moduleHandler()->moduleExists('geolocation')) {
    if (!array_key_exists('geolocation_input', $info)) {
      return;
    }

    // Add a pre-render call to alter the output of the geolocation form element.
    $info['geolocation_input']['#pre_render'][] = [
      GeoLocationFormElementRenderer::class,
      'preRender',
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function origins_media_form_entity_embed_dialog_alter(&$form, FormStateInterface &$form_state) {
  if (empty($form['entity_browser'])) {
    // Exit early if there's no entity browser defined(can occur on some steps).
    return;
  }

  // Start introducing some changes to the default paragraphs based entity
  // embed browser dialog:
  // Title change to something more relevant/helpful, skip the review/embed
  // steps for maps.
  if ($form['entity_browser']['#entity_browser'] == 'location_browser') {
    $form['#title'] = t('Choose map location');

    // Skip review and embed steps by changing the AJAX callback on the form
    // submit button.
    $form['actions']['save_modal']['#ajax']['callback'] = '::submitEmbedStep';

    // Pre-set a variety of attributes on the form that allow us to skip to the
    // embed complete step and just see our entity embedded in the WYSIWYG area.
    $form['attributes']['data-embed-button'] = [
      '#type' => 'value',
      '#value' => 'location',
    ];
    // NB: view mode is dynamically swapped in hook_entity_embed_alter().
    $form['attributes']['data-entity-embed-display'] = [
      '#type' => 'value',
      '#value' => 'view_mode:paragraph.preview',
    ];
    $form['attributes']['data-entity-type'] = [
      '#type' => 'value',
      '#value' => 'paragraph',
    ];
    $form['attributes']['data-entity-embed-display-settings'] = [
      '#type' => 'value',
      '#value' => '',
    ];
  }
}

/**
 * Implements hook_entity_embed_alter().
 *
 * Swap between entity embed view modes for Maps when you're viewing or
 * editing nodes.
 */
function origins_media_entity_embed_alter(array &$build, EntityInterface $entity, array &$context) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.canonical') {
    // Dynamic iframes are prohibited in CKEditor which breaks the display of
    // maps for editors, so we swap view mode to use a static map instead.
    if (method_exists($build['#entity'], 'getParagraphType')) {
      if ($build['#entity']->getParagraphType()->id() == 'map') {
        $context['data-entity-embed-display'] = str_replace('.preview', '.embed', $context['data-entity-embed-display']);
        $build['#context']['data-entity-embed-display'] = str_replace('.preview', '.embed', $build['#context']['data-entity-embed-display']);
        $build['#attributes']['data-entity-embed-display'] = str_replace('.preview', '.embed', $build['#attributes']['data-entity-embed-display']);
        $build['entity']['#view_mode'] = 'embed';
      }
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function origins_media_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['widget']->getPluginId() == 'entity_browser_entity_reference') {
    $element['#attached']['library'][] = 'origins_media/entity_browser_entity_reference';
  }
}

/**
 * Implements hook_form_alter().
 */
function origins_media_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if ($form_id == 'entity_browser_media_entity_browser_form') {
    // If this is not the inline entity form widget, add a CSS class to
    // initially disable the 'Select' button.
    if (empty($form['widget']['inline_entity_form'])) {
      $form['widget']['actions']['submit']['#attributes']['class'][] = 'inactive';
    }
  }

  // Disable Chosen select for embedded images view mode.
  if ($form_id === 'editor_media_dialog') {
    $form['view_mode']['#chosen'] = FALSE;
  }

  // Alterations for specific media entity forms.
  switch ($form_id) {
    case 'media_document_edit_form':
    case 'media_image_edit_form':
    case 'media_video_edit_form':
    case 'media_audio_edit_form':
      // Add a process callback to managed file field widgets.
      // Candidate field names for managed file fields.
      $file_fieldnames = [
        'field_media_file',
        'field_media_image',
        'field_media_video_file',
        'field_media_audio_file',
      ];
      // Add callback to each candidate managed file field widget.
      foreach ($file_fieldnames as $key) {
        if (!empty($form[$key]['widget'][0]['#process'])) {
          $form[$key]['widget'][0]['#process'][] = [
            ManagedFileTrustedCallback::class,
            'processManagedFile',
          ];
        }
      }
      break;

    case 'media_document_delete_form':
    case 'media_image_delete_form':
    case 'media_video_delete_form':
    case 'media_audio_delete_form':
      // When media items are deleted, we want the media_file_delete module to
      // delete the associated file from the file system. Ensure the option
      // "Also delete the associated file?" is checked by default.
      if (!empty($form['also_delete_file'])) {
        $form['also_delete_file']['#default_value'] = 1;
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function origins_media_file_delete(EntityInterface $entity) {
  // Purge file URL from Fastly.
  /** @var \Drupal\file\FileInterface $entity */
  $url = $entity->createFileUrl($relative = FALSE);
  if (!empty(\Drupal::hasService('fastly.api'))) {
    $fastly = Drupal::service('fastly.api');
    if (!empty($url)) {
      $fastly->purgeUrl($url);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_field().
 *
 * Injects the usage value of a media item into the table display.
 */
function origins_media_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field_id = $variables['field']->field;

  if ($view->id() == 'media_library' &&
    in_array($view->current_display, ['default_page', 'widget_table'])) {

    if ($field_id == 'filemime') {
      $pretty_mimes = \Drupal::service('origins_media.pretty_mime_types')->getMimeTypes();
      $mime_type_key = '';

      if (empty($variables['output'])) {
        // If empty, try checking mime type for an image.
        $media = $variables['row']->_entity;

        if ($media instanceof MediaInterface && $media->bundle() == 'image') {
          // Need to load the file behind it to check what it is.
          $file = File::load($media->get('field_media_image')->target_id);

          if ($file instanceof FileInterface) {
            $mime_type_key = $file->getMimeType();
          }
        }
      }
      else {
        $mime_type_key = $variables['output']->__toString();
      }

      // Replace with prettier version.
      if (array_key_exists($mime_type_key, $pretty_mimes)) {
        $variables['output'] = ViewsRenderPipelineMarkup::create($pretty_mimes[$mime_type_key]);
      }
    }

    if ($field_id == 'nothing') {
      $mid = $variables['row']->mid;
      $usage = \Drupal::service('whatlinkshere.linkmanager')->getReferenceContent(
        $variables['row']->_entity,
        PHP_INT_MAX,
        0);

      $ref_count = $usage['total'];

      $link = Link::createFromRoute(
        t('@count places', ['@count' => $ref_count]),
        'whatlinkshere.references.media',
        ['media' => $mid]
      );

      $variables['output'] = ViewsRenderPipelineMarkup::create($link->toString());
    }
  }
}

/**
 * Implements hook_preprocess_fieldset__media_library_widget().
 */
function origins_media_preprocess_fieldset__media_library_widget(array &$variables) {
  // Hide the 'Show media item weights' link.
  unset($variables['prefix']['weight_toggle']);
}

/**
 * Implements hook_views_pre_render().
 */
function origins_media_views_pre_render(ViewExecutable $view) {
  // Attach origins media library styles to media library views.
  if ($view->id() === 'media_library') {
    $view->element['#attached']['library'][] = 'origins_media/media_library_styles';
  }
}

/**
 * Implements hook_preprocess_media().
 */
function origins_media_preprocess_media(array &$variables) {

  if ($variables['view_mode'] !== 'media_library') {
    return;
  }

  $media_entity = $variables['media'];

  // Add class to the media entity wrapper to identify the media type.
  $variables["attributes"]['class'][] = 'media-' . $media_entity->bundle();

  // Replace generic document icons with a mimetype specific icon.
  if ($media_entity->bundle() === 'document') {

    $file_storage = \Drupal::entityTypeManager()->getStorage('file');

    // Get the underlying file associated with this document entity.
    $file = $file_storage->load($media_entity->field_media_file->target_id);

    if ($file instanceof FileInterface === FALSE) {
      return;
    }

    $mimetype = $file->getMimeType();

    // There shouldn't be an image file here, but just in case, screen for it
    // as if it's genuine it likely has its own thumbnail so we would want to
    // keep that.
    if (preg_match('/jpeg|jpg|gif|png/', $mimetype)) {
      return;
    }

    $simple_mimetypes = \Drupal::service('origins_media.pretty_mime_types')->getSimpleMimeTypes();
    $pretty_mimetypes = \Drupal::service('origins_media.pretty_mime_types')->getMimeTypes();

    // Replace the original image_style render element with a bespoke HTML
    // element.
    $variables['content']['thumbnail'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'class' => [
          'file--media-library-preview',
          'file--ico',
          'file--ico__' . $simple_mimetypes[$mimetype],
        ],
        'aria-label' => $pretty_mimetypes[$mimetype],
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_image_formatter().
 */
function origins_media_preprocess_image_formatter(array &$variables) {
  if (empty($variables['url']) || $variables['image_style'] != 'thumbnail') {
    return;
  }

  // Derive the media entity linked to from the URL.
  $url = &$variables['url'];
  $media_entity = $url->getOption('entity');

  if ($media_entity instanceof MediaInterface && $media_entity->bundle() === 'document') {
    $file_storage = \Drupal::entityTypeManager()->getStorage('file');
    // Get the underlying file associated with this document entity.
    $file = $file_storage->load($media_entity->get('field_media_file')->target_id);

    if ($file instanceof FileInterface) {
      $mimetype = $file->getMimeType();
      $simple_mimetypes = \Drupal::service('origins_media.pretty_mime_types')->getSimpleMimeTypes();
      $pretty_mimetypes = \Drupal::service('origins_media.pretty_mime_types')->getMimeTypes();

      // Replace the original image_style render element with a bespoke HTML
      // element with our custom CSS attached to render the file icon as
      // background CSS.
      $variables['image'] = [
        '#type' => 'html_tag',
        '#tag' => 'div',
        '#attributes' => [
          'class' => [
            'file--media-library-preview',
            'file--ico',
            'file--ico__' . $simple_mimetypes[$mimetype],
          ],
          'aria-label' => $pretty_mimetypes[$mimetype],
        ],
      ];
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function origins_media_form_media_library_add_form_upload_alter(&$form, FormStateInterface $form_state) {
  $form['#process'][] = 'origins_media_media_library_file_upload_process';
}

/**
 * Process function for Media Library file uploads.
 */
function origins_media_media_library_file_upload_process($form, FormStateInterface $form_state) {
  // Remove the default filename from the media widget name field.
  if (!empty($form['media']) && is_array($form['media'])) {
    foreach ($form['media'] as &$media_item) {
      if (!empty($media_item['fields']['name']['widget'][0]['value']['#default_value'])) {
        $media_item['fields']['name']['widget'][0]['value']['#default_value'] = '';
      }
    }
  }

  return $form;
}

/**
 * Implements hook_preprocess_media_oembed_iframe().
 */
function origins_media_preprocess_media_oembed_iframe(&$variables) {
  // If we're embedding a Youtube embed object, and there isn't already
  // and rel=0 parameter... add a rel=0 query parameter to the HTML
  // to show related videos from the same channel as the video, not videos
  // based on the viewer's recommendations from their own viewing history.
  // Based on implementation from Core's
  // media_test_oembed_preprocess_media_oembed_iframe().
  if ($variables['resource']->getProvider()->getName() === 'YouTube') {
    $variables['media'] = str_replace('?feature=oembed', '?rel=0&feature=oembed', (string) $variables['media']);
  }
}
